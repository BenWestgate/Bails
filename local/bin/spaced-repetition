#!/bin/bash

# Copyright (c) 2024 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Prompts the user for their user account password as spaced repetition.
###############################################################################

# Function to prompt for passphrase using pinentry-gnome3
get_passphrase() {
    passphrase="$(echo -e "SETPROMPT $enter Persistent Storage passphrase:\nGETPIN" | pinentry-gnome3 --timeout 99999 2>&1 | grep D | cut -c3-)"
    [ "$passphrase" ]
    return $?
}

check_passphrase() {
    read -rs passphrase
    temp_passw="$(head -c16 /dev/urandom | xxd -p)"
    printf '%s\n%s\n%s' "$passphrase" "$temp_passw" "$temp_passw" | passwd && \
    printf '%s\n%s\n%s' "$temp_passw" "$passphrase" "$passphrase" | passwd
}

# Initialize variables
min_interval=5
interval=30 # initial value
exp=1
enter='Enter'
sleep $interval
no_entry_sleep=2
while true; do
    if ! get_passphrase; then
        zenity --notification --text="No passphrase entered!\nEnter your passphrase to train your memory."
        sleep $((no_entry_sleep*=2))
        continue
    fi
    if check_passphrase &>/dev/null <<< "$passphrase"; then
        unset passphrase temp_passw
        interval=$((interval * (RANDOM % 2500 + 2000) / 2 ** exp / 1500))
        (( interval < min_interval )) && interval=$min_interval
        sleep $interval
        exp=0
        enter='Enter'
    else
        unset passphrase temp_passw
        zenity --notification --text="Passphrase does not match.\nTry again."
        sleep 3
        enter='Re-enter'
        ((exp = (exp == 0) ? 2 : exp + 1)) 
    fi
done
