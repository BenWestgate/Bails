#!/usr/bin/env python3

# Copyright (c) 2023 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


###############################################################################
# Passphrase confirm entry with strength meter, length req and toggle to unmask
###############################################################################

import gi

#gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from xdg import xdg_data_home

class PassphraseDialog(Gtk.Dialog):
    def __init__(self, parent, title):
        Gtk.Dialog.__init__(self, title, parent, 0,
                            (Gtk.STOCK_OK, Gtk.ResponseType.OK))
        # Set the icon from a file path
        self.set_icon_from_file(str(xdg_data_home()) + "/icons/bails128.png")
        self.set_default_size(500, 150)
        box = self.get_content_area()
        passphrase_entry = Gtk.Entry()
        passphrase_entry.set_placeholder_text("Passphrase")
        passphrase_entry.set_visibility(False)
        box.pack_start(passphrase_entry, False, False, 0)

        confirm_entry = Gtk.Entry()
        confirm_entry.set_placeholder_text("Confirm Passphrase")
        confirm_entry.set_visibility(False)
        box.pack_start(confirm_entry, False, False, 0)

        show_checkbox = Gtk.CheckButton(label="Show Passphrase")
        box.pack_start(show_checkbox, False, False, 0)

        ok_button = self.get_widget_for_response(Gtk.ResponseType.OK)
        ok_button.set_sensitive(False)  # Initialize OK without sensitivity
        ok_button.grab_default() # Enter will press OK if sensitive
        self.set_default(ok_button)

        def on_input_changed(entry):
            passphrase = passphrase_entry.get_text()
            confirm_passphrase = confirm_entry.get_text()
            if passphrase == confirm_passphrase and len(passphrase) >= 1:
                ok_button.set_sensitive(True)
                ok_button.grab_focus()
            else:
                ok_button.set_sensitive(False)

        passphrase_entry.connect("changed", on_input_changed)
        confirm_entry.connect("changed", on_input_changed)

        def on_show_checkbox_toggled(widget):
                passphrase_entry.set_visibility(show_checkbox.get_active())
                confirm_entry.set_visibility(show_checkbox.get_active())

        show_checkbox.connect("toggled", on_show_checkbox_toggled)

        self.show_all()
        on_input_changed()

        # Set focus on the "Show Passphrases" checkbox
        passphrase_entry.grab_focus()

        self.passphrase = None
        self.confirm_passphrase = None

        response = self.run()
        if response == Gtk.ResponseType.OK:
            self.passphrase = passphrase_entry.get_text()
            self.confirm_passphrase = confirm_entry.get_text()

        self.destroy()

dialog = PassphraseDialog(None, "Enter Persistent Storage passphrase")
if dialog.passphrase:
    print(dialog.passphrase + "\n" + dialog.confirm_passphrase)
else:
    print('\n')
