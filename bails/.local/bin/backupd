#!/bin/bash
# backupd: Daemon to Remind user to Back up Tails' encrypted persistent storage
# parameter 1: time until next scan , default 300, 5 minutes


set -o pipefail

export TEXTDOMAIN='tails'
export BIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export PYTHONPATH=${PYTHONPATH}:${HOME}/.local/lib/python3/site-packages
export LOCAL_DIR=/live/persistence/TailsData_unlocked/dotfiles/.local
export DATA_DIR=/live/persistence/TailsData_unlocked/Persistent/.bitcoin
export ICON="--window-icon=$LOCAL_DIR/share/icons/bails128.png"

EXPIRY_AGE=16 # weeks
LONGEVITY=$((EXPIRY_AGE * 7 * 24 * 3600)) # seconds
NEW_WALLET_SIZE=20000 # bytes

rescan_time=$1
in_sync=0
up_to_date=0
wallets_space_use=0

# symlink datadir into home for convenience, familiarity and safety on command line.
[ -e $HOME/.bitcoin ] || ln --symbolic $DATA_DIR $HOME

# Log the wallets space use to detect new wallets, encryption and metadata
wallets_space_use=$(du --bytes --summarize $DATA_DIR/wallets | cut -f1)

if [ -d $LOCAL_DIR/state/backups ]; then
    cd $LOCAL_DIR/state/backups
    for size in */wallet_bytes; do
        space=$(<$size)
        (( wallets_space_use < space + 20000 )) && (( in_sync++ ))
    done
    for age in $(for uuid in *; do last_update=$(date -d "$(<$uuid/last_update)" +%s); real_age=$((now - last_update)); rate=$(<$uuid/age_rate); echo $((real_age*100/rate)); done | sort --numeric-sort); do
        ((total+=age))
        ((total/ ++i < LONGEVITY)) && ((up_to_date++))
    done
fi

unset age total i space
# TODO remove "my personal advice from the prompts to shorten them to the necessary info at the time to pursuade a backup, display it after backup completes. FIXME
# Find the minimum of in_sync and up_to_date
synced_and_recent=$(( in_sync > up_to_date ? up_to_date : in_sync ))
last_up_to_date=$(<$LOCAL_DIR/state/good_backups)
echo $synced_and_recent > $LOCAL_DIR/state/good_backups
(( up_to_date > 1 )) && plur=s || plur=''
(( in_sync > 1 )) && plur2=s || plur2=''
(( up_to_date - in_sync > 1 )) && plur3=s || plur3=''
# Warn about backups expiring due to old age
if ((synced_and_recent == 0)) && (( wallets_space_use > 8192 )); then
    zenity --notification --text="WARNING: You must make a backup to use Bails safely"
    if (( in_sync == 0 )); then		#TODO trigger this skippably if 0 < in_sync < up_to_date to say N copies are in sync, M copies are missing the new Bitcoin wallet data.
        zenity --warning --title="Wallets backup$plur not synced!" --text="Your wallets directory grew significantly in size.\n\nBackup is <b>mandatory</b> if you've created or encrypted a wallet.\n\n<b>IMPORTANT: Any previous backups you have made should be replaced with\nnewly generated backups. Previous backups will become useless as soon as\nyou start using a new or newly encrypted wallet.</b>\n\nIf you fund a newly encrypted or newly created wallet before backing up offsite and\nsomething happens to this location, you will <b>LOSE ALL BITCOINS DEPOSITED</b>\!\n\nIf not, it is still recommended to make backups after a significant number of new\ntransactions to maintain the metadata, such as labels.\n\nClick OK to begin backup." --ellipsize $ICON && /usr/bin/gnome-terminal --wait --title 'Log of Persistent Storage Backup' --hide-menubar -- $LOCAL_DIR/bin/bails-backup && $BIN_DIR/backupd $((2*rescan_time)) || { zenity --question --title='Confirm you wish to skip backup?' --text="If you have created or encrypted any wallets\nsince your last backup$plur, you <b>MUST</b> click <b>No</b>." --width=300 --ellipsize --default-cancel $ICON && (( rescan_time+=86400 )); }
    elif (( in_sync < up_to_date )); then
        zenity --warning --title="Wallets backups not all synced!" --text="Your wallets directory grew significantly in size since all backups were last updated\nwith $((up_to_date - in_sync)) backup$plur3 remaining out-of-sync.\n\nIf you've created or encrypted a wallet, backup is <b>mandatory</b>.\n\n<b>IMPORTANT: Any previous backups you have made should be replaced with\nnewly generated backups. Previous backups will become useless as soon as\nyou start using a new or newly encrypted wallet.</b>\n\nIf not, it is still recommended to make backups after a significant number of new\ntransactions to maintain the metadata, such as labels.\n\nMy personal advice is to keep synced:\n\t-<b>One</b> backup Bails USB stick (low value data) or\n\t-<b>Three</b> backup Bails USB sticks (high value data).\n\nUpdate your backup USB$plur3 by replacing each offsite USB with a\nnew backup Bails USB stick.\n\n\t<b>You have $in_sync backup Bails USB$plur2 synced with your latest wallets</b>.\n\nClick OK to begin backup." --ellipsize $ICON && /usr/bin/gnome-terminal --wait --title 'Log of Persistent Storage Backup' --hide-menubar -- $LOCAL_DIR/bin/bails-backup && $BIN_DIR/backupd $((2*rescan_time)) || { zenity --question --title='Confirm you wish to skip backup?' --text="If you have created or encrypted any wallets\nsince your last backup$plur, you <b>MUST</b> click <b>No</b>." --width=300 --ellipsize --default-cancel $ICON && (( rescan_time+=86400 )); }
    fi
    if (( up_to_date == 0 )) && [ -d $LOCAL_DIR/state/backups ]; then
        until zenity --warning --title='Backup is Mandatory' --text="<b>All of your backup Bails USBs are out-of-date.</b>\n\nYou should backup now to protect your bitcoin data.\n\n\If something happens to this Bails USB and your backups have become\ntoo old and corrupted, you will <b>LOSE ALL OF YOUR BITCOINS</b>\!\n\nMost USB sticks do not guarante data retention even for a year.\n\nMy personal advice is to regularly update:\n\t-one backup Bails USB stick (low value data) or\n\t-three backup Bails USB sticks (high value data) in rotating order.\n\nUpdate your oldest backup Bails USB by replacing the offsite backup USB with a\nnew backup Bails USB stick.\n\nClick OK to begin backup." --ellipsize $ICON; do
            sleep $((++i))
        done
        until $LOCAL_DIR/bin/bails-backup; do
            zenity --notification --text="WARNING: All backups are out-of-date\!\nYou must make a backup to continue using Bails safely" --timeout $((++j))
        done 
    fi
elif (( up_to_date < last_up_to_date)); then
    (( up_to_date > 1 )) && plur=s || plur=''
    zenity --warning --title='A backup USB has expired and should be updated soon' --text="Backup USBs should be regularly updated by replacing them with a newly\ngenerated backup Bails USB.\n\nMy personal advice is to keep up-to-date:\n\t-<b>One</b> backup Bails USB stick (low value data) or\n\t-<b>Three</b> backup Bails USB sticks (high value data) in rotating order.\n\nUpdate your oldest backup Bails USB by replacing the offsite backup USB\nwith a new backup Bails USB stick.\n\n\t<b>You have $up_to_date backup Bails USB$plur remaining up-to-date</b>.\n\n\nClick OK to begin a backup now." --ellipsize $ICON && /usr/bin/gnome-terminal --wait --title 'Log of Persistent Storage Backup' --hide-menubar -- $LOCAL_DIR/bin/bails-backup
fi

# wait the polling interval then check again but with delay multiplied by 2.
sleep $rescan_time
echo checking again in $rescan_time seconds	#TODO remove this after testing
$BIN_DIR/backupd $((2*rescan_time))


# for time expiry, it should average of all backups.
# if over 4 months, it marks the oldest backup expired and repeats the calculation excluding it.
# the largest amount of backups that average under 4 months is the up-to-date backup value. 
# Example 2,4,7 would expire the oldest, then average 3 for the remaining 2 up to date backups.
# if 2 were updated, 0,4,7 averages under 4 and so it would call 3 up-to-date again.
# Ex: 1 backup reaches 4 months and a transfer is made to update it. During the swap there is 1 USB age 0 mo
# Ex: if the swapped out USB is updated to on site, he will still be asked to update the off-site one at 4 months.
# Ex: but if he keeps updating the on-site USB he could get the other to age as much as 8 months. Which is the maximum tolerable, since +50% makes that 1 year the maximum guaranteed time for data preservation. This would require ignoring the warning many times, as it suggests updating your oldest off-site backups first by swapping them out.
# the user will be warned and made to awknowledge that a backup has expired if under 3 remain.
# the user will be warned every startup and every 5+/-2.5 minutes, *=2 after when all have expired.
# pick a random number between 5000 and 15000 for each UUID, each flash to divide by and multiply by 10000 to adjust the aging rate for unpredictability.
# each USB has an age in seconds
# expire the USB that is Actually Oldest, not the one with the most adjusted age.
# the number of up-to-date backups is displayed to the user in bails-menu, whenever one expires, before and after updating/creating a backup and constantly when 0 remain updated.
# TODO make sure every backup gets marked expired after creating new descriptor wallets or encrypting existing ones.
