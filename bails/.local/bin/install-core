#!/bin/bash

# Copyright (c) 2023 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Downloads Bitcoin Core and installs it persistently. Starts bails-wallet.
###############################################################################

# For security reviewing use: https://explainshell.com/ for unfamiliar commands.

# Set environment variables and constants
export PATH="$HOME/.local/bin:$PATH"
export DOWNLOAD_DIR="$HOME/.local/share/bitcoin"
export ICON=--window-icon="$HOME/.local/share/icons/bails128.png"
export WAYLAND_DISPLAY="" # Needed for zenity dialogs to have window icon
export TMPDIR=$XDG_RUNTIME_DIR
export SOURCE="/live/persistence/TailsData_unlocked"
export DATA_DIR="$SOURCE/Persistent/.bitcoin"
export DOTFILES="$SOURCE/dotfiles"
export XDG_CONFIG_HOME="$DOTFILES/.config"
export XDG_CACHE_HOME="$DOTFILES/.cache"
export LOCAL_DIR="$DOTFILES/.local"
export XDG_STATE_HOME="$LOCAL_DIR/state"
readonly XDG_DATA_HOME="$LOCAL_DIR/share"
readonly BITCOIN_CORE_DOMAIN="https://bitcoincore.org"
readonly SECURITY_IN_A_BOX_TOR_URL="http://lxjacvxrozjlxd7pqced7dyefnbityrwqjosuuaqponlg3v7esifrzad.onion/en/"
readonly BITCOIN_CHAINPARAMS_URL="https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/kernel/chainparams.cpp"


# Look for good signatures
# Parameter 1 = Good Signatures required
check_sigs() {
    temp_file="$(mktemp)"
    trap 'rm -rf -- "$temp_file"' EXIT
    type=warning
    # shellcheck disable=SC2086
    keys="$(grep fingerprint $DOWNLOAD_DIR/builder-keys | sed 's/ //g' | cut -f2 -d= | shuf)"
    for key in $keys; do
        search_key
        (( good_sig < $1 )) || { type=info; break; }
    done
    zenity --$type --title="$good_sig of $1 good signatures found" --text="$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep 'Good signature' | cut -c6-)" --no-markup --width=200 --no-wrap "$ICON" --timeout=10
    (( good_sig >= $1 ))
}


# Search and display key info
# Parameter 1 = (optional) fall back keyserver
search_key() {
    echo ''>"$temp_file"
    # shellcheck disable=SC2086
    { gpg --search-keys $1 "$key" >"$temp_file"; } & gpg_pid=$!
    [ -n "$1" ] || echo -e "\nSearching $key on openpgp.org keyserver..."
    until grep 'key' "$temp_file" >/dev/null; do
        sleep 1; printf '.'
        ps -p $gpg_pid &>/dev/null || break
    done
    pkill gpg &>/dev/null
    if grep '@' "$temp_file" >/dev/null; then 
        sed -i 's/(1)/   /' "$temp_file"
        # shellcheck disable=SC2086
        if zenity --question --title='Do you trust this individual?' --no-markup --ellipsize \
        --text="$(<$temp_file)" "$ICON" --icon-name=auth-fingerprint; then
            # shellcheck disable=SC2086
            gpg $1 --recv-key "$key"
        else
            gpg --batch --yes --delete-keys "$key" &>/dev/null
        fi
    elif [ -n "$1" ]; then
        echo "$key not found."
    else
        echo "Searching $key on fallback keyserver.ubuntu.com keyserver..."
        search_key '--keyserver keyserver.ubuntu.com'
    fi
    good_sig=$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep --count 'Good signature')
}


get_guix_sigs() {
    cd guix.sigs || git clone https://github.com/bitcoin-core/guix.sigs --depth=1 || return 1
    git pull # Update guix.sigs
}


retry_on_fail() {
    until "$@"; do
        sleep $((retry++))
    done
}


###############################################################################
# Begin execution here
###############################################################################

printf '\033]2;Welcome to Bails!\a'
clear -x # Clear the terminal
pkill tca &>/dev/null # Close tor connection assistant to clean up the screen
set -m # Enable job control to show background downloads progress in foreground

# Setup Persistent Storage in background if it is not already
( persistent-setup || systemctl reboot ) & tps_setup=$!
cd "$DOWNLOAD_DIR" || exit 1
# Download chain parameters in background
retry_on_fail wget --continue -O chainparams.cpp $BITCOIN_CHAINPARAMS_URL & get_size=$!
retry_on_fail wget "$BITCOIN_CORE_DOMAIN/en/download" # Query latest version
VER=$(grep -oPm1 '(?<=bitcoin-core-).*(?=/SHA256SUMS.asc)' download)
# Download Bitcoin core checksums and signatures in background
retry_on_fail wget -cxnH --cut-dirs=1 "$BITCOIN_CORE_DOMAIN/bin/bitcoin-core-$VER/SHA256SUMS"{,.asc} & sig_dl=$!
# Download Bitcoin core binary in background
retry_on_fail wget -cxnH --cut-dirs=1 "$BITCOIN_CORE_DOMAIN/bin/bitcoin-core-$VER/bitcoin-$VER-x86_64-linux-gnu.tar.gz" & get_core=$!
printf '\033]2;Getting Bitcoin Core builder keys...\a'
retry_on_fail get_guix_sigs

(cd guix.sigs/"$VER" || exit 1; for name in *; do gpg --show-keys "$DOWNLOAD_DIR/guix.sigs/builder-keys/$name.gpg"; done) > builder-keys
if OLD_VER=$(bitcoind --version); then # Refresh keys if updating
    action=update
    printf '\033]2;Updating all keys from keyserver...\a'
    gpg --refresh-keys
else # Import a trusted set on first-run.
    action=installation
    for key in ./trusted-keys/*; do
        if grep "$(gpg --show-keys "$key" | grep 'Key fingerprint')" builder-keys; then
            gpg --import "$key"
        else
            echo "Warning: Bails trusted key $key did not sign Bitcoin Core version $VER, skipping."
        fi
    done
fi

printf '\033]2;Setup Persistent Storage...\a'
wait -f "$tps_setup"

printf '\033]2;Getting Bitcoin Core signatures...\a'
ps -p $sig_dl &>/dev/null && fg %"$(jobs -l | grep $sig_dl | cut -f1 -d' ' | tr -c -d '[:digit:]')"
cd bitcoin-core-"$VER" || exit 1 # Switch into latest bitcoin-core directory
if [ ! -f SHA256SUMS ]; then
    zenity --error --title="Signature file not found" --text="Click OK to try downloading Bitcoin Core again." --ellipsize "$ICON" && \
    install-core	# Launch this script again
    exit 1
fi

export BINVERIFY_MIN_GOOD_SIGS=${BINVERIFY_MIN_GOOD_SIGS:-3}
who_trusts="the Bails maintainers"
while true; do
    printf '\033]2;Verify checksum signatures...\a'
    good_sig=$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep --count 'Good signature')
    # TODO: When my PR is merged to bitcoin-core, lets update this file to use it entirely for the download process, using wget only to fetch the latest version number.
    if ((good_sig >= BINVERIFY_MIN_GOOD_SIGS)); then
        zenity --question --title='Further download verification' --text="Your Bitcoin Core download has been successfully verified by $good_sig signatures from individuals trusted by $who_trusts.\n\nFurther download verification is optional. It requires around 5 to 10 minutes.\n\nPerforming additional verification gives further assurance you have not downloaded an unexpected or tampered version of Bitcoin." --cancel-label='Continue Setup' --default-cancel --ok-label='More Verification' "$ICON" --icon-name=gtk-dialog-authentication
        verified=$?
        ((verified)) && break
        ((BINVERIFY_MIN_GOOD_SIGS++))
    else
        zenity --warning --title='Verify Bitcoin Core download' --text='Download verification is required.\n\nPerforming the verification steps ensures that you have not downloaded an unexpected or tampered version of Bitcoin, which may result in loss of funds.' --ok-label='Verify Now' "$ICON" --icon-name="gtk-dialog-authentication"
        verified=0
    fi
    [[ "$who_trusts" == "you" ]] || zenity --info --title="Choose trustworthy individuals" --text="Bitcoin releases are signed by a number of individuals, each with a unique public key. You decide which of these public keys you trust.\n\nTo validate your download's signatures, choose a few individuals who you find trustworthy." "$ICON" --icon-name=security-high
    who_trusts="you"
    check_sigs "$BINVERIFY_MIN_GOOD_SIGS" || BINVERIFY_MIN_GOOD_SIGS=3
done

printf '\033]2;Downloading Bitcoin Core...\a'
# Bring Bitcoin Core download to foreground to display progress and wait for it
ps -p $get_core &>/dev/null && fg %"$(jobs -l | grep $get_core | cut -f1 -d' ' | tr -c -d '[:digit:]')"
# Verify download integrity
if file_name=$(sha256sum --ignore-missing --check SHA256SUMS); then
    zenity --notification --text="Bitcoin Core download integrity successfully verified." --window-icon=checkbox-checked
else
    zenity --error --title="Download integrity failure" --text="Checksum does not match what was expected.\n\nClick OK to try downloading Bitcoin Core again." --ellipsize "$ICON" && \
    install-core	# Launch this script again
    exit 1
fi

stop-btc # Kill Bitcoin Core if running, wait for it to shutdown safely
printf '\033]2;Installing Bitcoin Core...\a'
tar -xvf "${file_name::-4}" --strip-components=1 --directory=$LOCAL_DIR
# Move completed verified download to persistent storage
rm -Rf "$DOWNLOAD_DIR"/{download*,*.tmp,wget-log*}
rsync --remove-source-files --recursive "$DOWNLOAD_DIR" $XDG_DATA_HOME
# Change mime association from electrum to bitcoin core
sed 's/bitcoin=electrum/bitcoin=bitcoin-qt/g' /usr/share/applications/mimeinfo.cache > "$XDG_DATA_HOME/applications/mimeinfo.cache"
# Configure data directory
rsync --remove-source-files "$LOCAL_DIR"/{bitcoin.conf,README.md} $DOTFILES/.bitcoin
sed -i 's/#rpcport=<port>/rpcport=17600/' "$DOTFILES/.bitcoin/bitcoin.conf"     # set -rpcport for Tails
sed -i "s,#datadir=<dir>,datadir=$DATA_DIR," "$DOTFILES/.bitcoin/bitcoin.conf"  # set -datadir for Tails
sed -i "s,#debuglogfile=<file>,debuglogfile=$HOME/.bitcoin/debug.log," "$DOTFILES/.bitcoin/bitcoin.conf" # set log to tmpfs
link-dotfiles
[ -e $DATA_DIR/wallets ] || mkdir -p $DATA_DIR/wallets # TODO: this can be replaced by creating the symlink in panic mode solution
ln --symbolic --force /media/"$USER" $DATA_DIR/wallets     # links media mount directory to wallets folder for easier loading of watch encrypted or external media wallets
chmod -w $DATA_DIR/wallets  # TODO: this can be deleted when panic mode is added
ln --symbolic --force {"$HOME"/.bitcoin,$DATA_DIR}/debug.log # symlinks to tmpfs debug.log
ln --symbolic $DOTFILES/.bitcoin/{README.md,bitcoin.conf} $DATA_DIR # symlinks to dotfiles/.bitcoin
# Bring chainparams.cpp download to foreground, set assumed chainstate & blockchain size, configure prune
ps -p $get_size &>/dev/null && fg %"$(jobs -l | grep $get_size | cut -f1 -d' ' | tr -c -d '[:digit:]')"
assumed_chain_state_size=$(grep --max-count=1 m_assumed_chain_state_size "$DOWNLOAD_DIR"/chainparams.cpp | sed 's/[^0-9]*//g')
assumed_blockchain_size=$(grep --max-count=1 m_assumed_blockchain_size "$DOWNLOAD_DIR"/chainparams.cpp | sed 's/[^0-9]*//g')
# Calculate space available for block file storage
space=$(($(df --output=avail $SOURCE | tail -1) * 1024 / 10 ** 9 - assumed_chain_state_size - 10))
prune_GB=$((space > 2 ? space : 2 ))
# Disable pruning if USB stick is large enough
prune_MiB=$((space > assumed_blockchain_size ? 0 : prune_GB * 10 ** 9 / 1024 ** 2))
# Enable proxies for Tor and prune
[ -f $DATA_DIR/settings.json ] || echo '{
    "dbcache": "450",
    "onion": "127.0.0.1:9050",
    "proxy": "127.0.0.1:9050",
    "prune": "'$prune_MiB'",
    "server": true
}' > $DATA_DIR/settings.json
# Update $PATH environment variable to include new user bin
# shellcheck source=/dev/null
. "$HOME"/.profile
printf "\033]2;Bitcoin Core %s complete!\a" $action

if [ -e $XDG_STATE_HOME/installed ]; then
    gtk-launch bitcoin-qt
    zenity --info --title='Update successful' --text="${OLD_VER%Copyright}was updated to $(bitcoind --version)" "$ICON" --icon-name=bitcoin128
else
    (
    if ((prune_MiB)); then
        prune_text=" and storage limit"
        prune_text2=" and <i>$prune_GB GB</i>"
    fi
    export DONT_ASK_DONATIONS=1 # Don't ask for donations on first install
    # Temporarily change $HOME directory make Bails's datadir the default
    HOME=~/Persistent
    until [ -f $DATA_DIR/bitcoind.pid ]; do
        grep /strDataDir= $XDG_CONFIG_HOME/Bitcoin/Bitcoin-Qt.conf && stop-btc
        sed -i '/strDataDir=/d' $XDG_CONFIG_HOME/Bitcoin/Bitcoin-Qt.conf
        zenity --notification --text="Use the default data directory$prune_text.\n<i>$HOME/.bitcoin</i>$prune_text2" --window-icon=bails128
        pgrep bitcoin || wrapped bitcoin-qt -choosedatadir -prune=$prune_MiB -min
        sleep 12
    done
    )
    link-dotfiles
    (( $(find $DATA_DIR/wallets/* | wc -l) < 2 )) && bails-wallet
    # Display info about IBD, keeping Tails private and extra reading material
    zenity --info --title='Setup almost complete' --icon-name=bails128 "$ICON" --text='Bitcoin Core has begun syncing the block chain automatically.\nMake sure no one messes with the PC.\n\nTo lock the screen for privacy, press ❖+L (⊞+L or ⌘+L)\n\nIt is safer to exit Bitcoin Core (Ctrl+Q), <a href="file:///usr/share/doc/tails/website/doc/first_steps/shutdown.en.html">shutdown Tails</a> and take your Bails USB stick with you or store it in a safe place than leave Tails running unattended where people you distrust could tamper with it.\n\nIf you want to learn more about using Tails safely read the <a href="file:///usr/share/doc/tails/website/doc.en.html">documentation</a>.\n\nAnother excellent read to improve your physical and digital security tactics is the <a href="'"$SECURITY_IN_A_BOX_TOR_URL"'">security in-a-box</a> website.'
fi
touch $XDG_STATE_HOME/installed
