#!/bin/bash

# Copyright (c) 2024 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Prompts user for the luks2 passphrase of an image file as spaced repetition.
###############################################################################
VOLUME_NAME="${1%.img}"
FIRST_RUN="$2"
XDG_STATE_HOME="$HOME/.local/state" # Temporarily used during setup
/usr/local/lib/tpscli is-active Dotfiles && \
XDG_STATE_HOME="/live/persistence/TailsData_unlocked/dotfiles/.local/state"

screen_is_locked() {
    # Check if the current session is locked
    # shellcheck disable=SC2046
    session_state=$(loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p LockedHint | cut -d= -f2)
    [ "$session_state" = "yes" ]
}

get_passphrase() {
    reply=$(echo -e "SETPROMPT $enter ${VOLUME_NAME##*/} passphrase:\nGETPIN" | pinentry-gnome3 2>&1)
    grep Operation cancelled <<< "$reply" && volume_is_tps || return 1
    passphrase=$(grep D <<< "$reply") && return 0
    zenity --info --title="No passphrase entered" --text="Enter your passphrase to train your memory." --timeout=3
    get_passphrase
}

check_passphrase() {
    unset passphrase
    printf '%s' "$1" | /sbin/cryptsetup --test-passphrase open "$VOLUME_NAME".img && \
    passwd -S "$USER" | grep NP && printf '%s\n%s' "$1" "$1" | passwd
}

entry_is_open() {
    for entry in pinentry-gnome3 {codex32_confirm,set_pass,passphrase}.py; do
        pgrep "$entry" && return 0
    done # TODO: could be combined with screen is locked
}

volume_is_tps() {
    [ "$VOLUME_NAME" == "Persistent Storage" ]
}

set_interval() {
    interval=$(($1 * (RANDOM % 2500 + 2000) / 2 ** exp / 1500))
    (( interval < 5 )) && interval=5 # Set a minimum
    echo "$interval" > "$VOLUME_NAME.interval"
    interval=$(<"$VOLUME_NAME.interval")
}

cd "$XDG_STATE_HOME/bails" || exit 1
exp=0
enter='Enter'
[ -e "$VOLUME_NAME.interval" ] || set_interval 15 # Initially 20-45s
interval=$(<"$VOLUME_NAME.interval")
# Login counts as a successful rehearsal
volume_is_tps && [ "$FIRST_RUN" == 'True' ] && set_interval "$interval"
next_test_due=$(date -d "$(date -r "$VOLUME_NAME.interval")+$interval" +%s)
sleep_time=$((next_test_due - $(date +%s)))
((sleep_time > 0)) && sleep $sleep_time
while screen_is_locked || entry_is_open; do sleep 5; done
while get_passphrase && ! check_passphrase "${passphrase:3}" &>/dev/null; do
    zenity --info --title="Passphrase does not match" --text="Try again." --timeout=2
    enter='Re-enter'
    ((exp = (exp == 0) ? 2 : exp + 1))
done
set_interval
spaced-repetition "$VOLUME_NAME".img
