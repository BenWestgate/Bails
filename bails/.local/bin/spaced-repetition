#!/bin/bash

# Copyright (c) 2024 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Prompts user for the luks2 passphrase of an image file as spaced repetition.
###############################################################################
VOLUME_PATH="$1"
XDG_STATE_HOME="$HOME/.local/state" # Temporarily used during setup
/usr/local/lib/tpscli is-active Dotfiles && \
XDG_STATE_HOME="/live/persistence/TailsData_unlocked/dotfiles/.local/state"
volume_name="${1##*/}"
volume_name="${volume_name%.img}"

wait_if_locked_or_typing() {
    sleep "$1"
    XDG_SESSION_ID=$(loginctl | awk /$UID/'{print $1}')
    loginctl show-session "$XDG_SESSION_ID" -p LockedHint | grep "yes" && \
        wait_if_locked_or_typing $((passwd_is_passphrase ? interval : 10))
    for entry in pinentry-gnome3 {codex32_confirm,set_pass,passphrase}.py; do
        pgrep -f "$entry" && wait_if_locked_or_typing 3
    done # TODO: add codex32_entry.py
}

get_passphrase() {
    local reply
    reply=$(echo -e "SETPROMPT $enter $volume_name passphrase:\nGETPIN" | \
        pinentry-gnome3 2>&1)
    grep Operation cancelled <<< "$reply" && \
        [ "$volume_name" == "Persistent Storage" ] || return 1
    passphrase=$(grep D <<< "$reply") && return 0
    zenity --info --title="No passphrase entered" --timeout=3 \
        --text="Enter your passphrase to train your memory."
    get_passphrase
}

check_passphrase() {
    unset passphrase
    printf "%s" "$1" | /sbin/cryptsetup --test-passphrase open "$VOLUME_PATH" && \
        passwd -S "$USER" | grep NP && printf '%s\n%s' "$1" "$1" | passwd && \
        passwd_is_passphrase=1
}

set_interval() {
    interval=$(($1 < 5 ? 5 : $1 * (RANDOM % 2500 + 2000) / 2 ** exp / 1500))
    echo "$interval" > "$volume_name.interval"
}

enter='Enter'
exp=0
cd "$XDG_STATE_HOME/bails" || exit 1
while true; do 
    interval=$(<"$volume_name.interval") || set_interval 15
    next_test_due=$(date -d "$(date -r "$volume_name.interval")+$interval" +%s)
    sleep_time=$((next_test_due - $(date +%s)))
    ((sleep_time > 0)) && sleep $sleep_time
    wait_if_locked_or_typing 0.1
    while get_passphrase && ! check_passphrase "${passphrase:3}"; do
        zenity --info --title="Passphrase does not match" --text="Try again." --timeout=2
        enter='Re-enter'
        ((exp = (exp == 0) ? 2 : exp + 1))
    done
    set_interval "$interval"
done
