#!/bin/bash

# Copyright (c) 2024 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Prompts the user for their user account password as spaced repetition.
###############################################################################

XDG_STATE_HOME="$HOME/.local/state"

screen_is_locked() {
    # Check if the current session is locked
    # shellcheck disable=SC2046
    session_state=$(loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p LockedHint | cut -d= -f2)
    [ "$session_state" = "yes" ]
}

# Prompt for passphrase using pinentry-gnome3
get_passphrase() {
    passphrase="$(echo -e "SETPROMPT $enter Persistent Storage passphrase:\nGETPIN" | pinentry-gnome3 2>&1 | grep D | cut -c3-)"
    [ "$passphrase" ]
}

check_passphrase() {
    printf '%s' "$1" | /sbin/cryptsetup --test-passphrase open "$PASS_TESTER" && \
    passwd -S "$USER" | grep NP && printf '%s\n%s' "$1" "$1" | passwd
}
cd "$XDG_STATE_HOME" || exit 1
# Initialize variables
min_interval=5
interval=$(<last_spaced_repetition_interval) # initial value is 30 sec
exp=0
enter='Enter'
sleep "$interval"
while true; do
    if screen_is_locked; then
        sleep "$interval"
        continue
    fi
    if ! get_passphrase; then
        zenity --notification --text="No passphrase entered!\nEnter your passphrase to train your memory."
        sleep 2
        continue
    fi
    if check_passphrase "$passphrase" &>/dev/null; then
        unset passphrase temp_passw passwd_unset
        interval=$((interval * (RANDOM % 2500 + 2000) / 2 ** exp / 1500))
        (( interval < min_interval )) && interval=$min_interval
        echo "$interval" > last_spaced_repetition_interval
        sleep $interval
        exp=0
        enter='Enter'
    else
        unset passphrase temp_passw
        zenity --notification --text="Passphrase does not match.\nTry again."
        sleep 2
        enter='Re-enter'
        ((exp = (exp == 0) ? 2 : exp + 1)) 
    fi
done
