#!/bin/bash

# Copyright (c) 2023 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Bails Persistent Storage Setup Tutorial
###############################################################################

# For security reviewing this use: https://explainshell.com/ for commands that are unclear.

XDG_STATE_HOME="/live/persistence/TailsData_unlocked/dotfiles/.local/state"
SET_UP="$XDG_STATE_HOME/tps_is_set_up"
export PERSISTENT="/live/persistence/TailsData_unlocked/Persistent"
IMAGE_FILE="$PERSISTENT/Persistent Storage.img"
if [ "$1" == "--test" ]; then
    DONT_ENFORCE_ENTROPY=1
fi

new_passphrase_helper() {
    local passphrase
    passphrase=$(python3 -c 'from bails import set_pass
box = set_pass.SimplePassphraseDialog(None,"Enter Persistent Storage passphrase")
if box.passphrase:
    print(box.passphrase)' 2>/dev/null)
    [ -z "$passphrase" ] && return 1
    # Check if user password is already set
    if passwd -S "$USER" | grep NP; then
    # Change user account password to Persistent Storage passphrase for spaced repetition practice.
        printf '%s\n%s' "$passphrase" "$passphrase" | passwd || { echo "FAILURE to change passphrase"; return 1; }
    fi
    # Estimate passphrase entropy to see if we can proceed
    entropy=$(keepassxc-cli estimate "${passphrase// /}" | cut -f2 | tr -C -d '[:digit:]')
    if ((DONT_ENFORCE_ENTROPY)) || ((entropy >= 65000)) || { ((entropy > 50000)) && zenity --question --icon-name=dialog-warning --title='Warning: Weak Passphrase Detected' \
            --text="<b>Your passphrase is too weak to protect against a state-sponsored attacker with physical access to your USB stick.</b>\n\nTails recommends choosing a long passphrase made of 5 to 7 random words.\n<a href='https://theintercept.com/2015/03/26/passphrases-can-memorize-attackers-cant-guess/'>Learn about the maths behind memorizable and secure passphrases</a>.\n\nIf a state-sponsored attacker with physical access to your device is part of your <a href='https://ssd.eff.org/module/your-security-plan'>threat model</a>, you MUST restart, delete this Persistent Storage and use a recommended passphrase.\n\nFor more information, please read the Tails security advisory on passphrase security: <a href='https://tails.net/security/argon2id/#understanding'>Understanding weak passphrases</a>\n\nBe sure to save your work before clicking 'Restart Now'." "$ICON" --ok-label='Continue' --default-cancel --cancel-label='Restart Now'; }; then
        unset entropy
        mkdir "$XDG_RUNTIME_DIR/bails"
        dd if=/dev/urandom of="$IMAGE_FILE" bs=4096 count=8192
        printf '%s' "$passphrase" | /sbin/cryptsetup luksFormat "$IMAGE_FILE" && return 0
    else
        zenity --warning --title='WARNING: Weak Passphrase Detected' \
            --text="<b>Your passphrase is too weak to protect against attackers with physical access to your USB stick.</b>\n\nTails recommends choosing a long passphrase made of 5 to 7 random words.\n<a href='https://theintercept.com/2015/03/26/passphrases-can-memorize-attackers-cant-guess/'>Learn about the maths behind memorizable and secure passphrases</a>.\n\nYou MUST restart, delete this Persistent Storage and use a recommended passphrase.\n\nFor more information, please read the Tails security advisory on passphrase security: <a href='https://tails.net/security/argon2id/#understanding'>Understanding weak passphrases</a>\n\nBe sure to save your work before clicking 'Restart Now'." "$ICON" --ok-label='Restart Now'
    fi
    exit 1
    # TODO remove comment when done testing 
    # systemctl reboot
}

# Display welcome message
[ -f $SET_UP ] || { zenity --title='Welcome to Bails' --info \
    --text="Thank you for choosing Bails, a self-custodial Bitcoin wallet and full node.\n\nDuring this initial setup process, we will guide you through the necessary steps\nto ensure a smooth experience. Let's get started!" \
    --no-wrap --ok-label='Continue' "$ICON" --icon-name=bails128
}

# Check for already unlocked Persistent Storage
if /usr/local/lib/tpscli is-unlocked; then
    # Check for existing Persistent Storage passphrase
    [ -f $SET_UP ] || until new_passphrase_helper; do
        zenity --error --title="Error" --text="Existing Persistent Storage passphrase is required. Please provide the passphrase." "$ICON"
    done
else
    printf '\033]2;Setup the Persistent Storage\a'
    # Choose passphrase
    zenity --warning --title='Choose a strong passphrase' --no-wrap "$ICON" \
        --text='It is important to select a strong passphrase to protect your Bitcoin data.\n
We recommend using a suggested passphrase from the Persistent Storage dialog.' \
        --ok-label='I Will Use a Suggested Passphrase' --icon-name=tails-persistent-storage
    zenity --warning --title='Write your passphrase down' "$ICON" \
        --text='It is impossible to recover your passphrase if you forget it!\n
To help you remember, write it on paper, seal in an envelope, secure it for a few days in a place like a safe or your wallet, then destroy it once you know it well.\n
Write on a hard surface to avoid leaving an imprint of the secret.' \
        --ok-label='I Will Write My Passphrase Down' --icon-name=org.gnome.TextEditor
    # Persistent storage creation
    while /usr/local/lib/tpscli is-created; do
        grep --count 'python3 /usr/local/lib/tps-frontend' <<< "$(ps -ef)" - >/dev/null ||
            { tails-persistent-storage & notify-send --icon=tails-persistent-storage 'Restart Tails or Delete your Persistent Storage'; }
        sleep 1
    done # Dont continue setup if a tps exists but don't tell to delete

    until /usr/local/lib/tpscli is-created; do
        grep --count 'python3 /usr/local/lib/tps-frontend' <<< "$(ps -ef)" - >/dev/null ||
            { tails-persistent-storage & notify-send --icon=tails-persistent-storage 'Click Continue to create a Persistent Storage'; }
        sleep 10
        until /usr/local/lib/tpscli is-created; do
            notify-send --icon=bails128 'Important: Click ↻ or choose the suggested passphrase.' 'To help remember:\n\nCreate a mental image or mnemonic using the words, in order.\nIt might be a story, scenario, or sentence that you can remember and that reminds you of the particular passphrase you chose.'
            sleep 12
        done &
    done
    until /usr/local/lib/tpscli is-active PersistentDirectory; do
        sleep 1
    done
    pkill -f "python3 /usr/local/lib/tps-frontend" &>/dev/null
    # Memorization help
    until {
        zenity --info --title='Spaced repetition trainer' \
            --text='Enter the <b>exact</b> same passphrase from Persistent Storage so Bails can help you memorize it.' \
            --ok-label='I Will Enter the Exact Same Passphrase' --ellipsize "$ICON"
        new_passphrase_helper
    }; do
        zenity --warning --text='No passphrase was entered.' --title="Spaced repetition trainer" \
            --ok-label='Try Again' --ellipsize
    done
fi
# Spaced repetition training
for image in "$PERSISTENT"/*.img; do
    ((DONT_ENFORCE_ENTROPY)) && break
    pgrep -f "spaced-repetition $image" > /dev/null || spaced-repetition "$image"
done &

if ! [ -f "$SET_UP" ]; then
    # Display memorization tips
    zenity --info --title='Tips for your new passphrase' \
            --text="You will be prompted to enter your passphrase as spaced repetition training.\n\nPractice entering your passphrase <i>daily at first and then at least once a week</i>  to commit it to memory.\n
    Keep your passphrase safe, DO NOT:
     • share it with anyone (instead clone them a Bails USB),
     • give it when someone emails, calls, or messages,
     • photograph it,
     • re-use for any other account, or type it outside of Bails.

    DO:
     • be mindful of whether you can be seen or recorded typing,
     • immediately change it when you suspect it is compromised,
     • store it out of sight away from your Bails USB sticks, and
     • destroy it once memorized." \
            --ok-label='I Will Destroy It Once Memorized' "$ICON"
fi
# Check features of the Persistent Storage
if /usr/local/lib/tpscli is-active PersistentDirectory && \
    /usr/local/lib/tpscli is-active GnuPG && \
    /usr/local/lib/tpscli is-active Dotfiles; then
        :
else
    grep --count 'python3 /usr/local/lib/tps-frontend' <<< "$(ps -ef)" - >/dev/null || \
        { tails-persistent-storage & notify-send --icon=tails-persistent-storage 'You must turn on needed features of the Persistent Storage.'; }
    zenity --info --title='Features of the Persistent Storage' \
        --text='In the Persistent Storage application below, scroll\nand click the toggle to turn on necessary features.' \
        --icon-name=tails-persistent-storage "$ICON" --no-wrap &
    sleep 4
fi
until /usr/local/lib/tpscli is-active PersistentDirectory && \
    /usr/local/lib/tpscli is-active GnuPG && \
    /usr/local/lib/tpscli is-active Dotfiles; do
    grep --count 'python3 /usr/local/lib/tps-frontend' <<< "$(ps -ef)" - >/dev/null ||
        { tails-persistent-storage & notify-send --icon=tails-persistent-storage 'You must turn on needed features of the Persistent Storage.'; }
    {
        /usr/local/lib/tpscli is-active PersistentDirectory ||
            { zenity --notification --text='Persistent Folder must be toggled on.' --window-icon=folder --timeout=6; false; }
    } &&
        {
            /usr/local/lib/tpscli is-active NetworkConnections ||
                { ((i++ < 5)) && zenity --notification --text='Toggle on "Network Connections".\nThis will remember your Wi-Fi.' --window-icon=gnome-dev-ethernet --timeout=6; true; }
        } &&
        {
            /usr/local/lib/tpscli is-active GnuPG ||
                { zenity --notification --text='"GnuPG" must be toggled on.' --window-icon=gcr-key --timeout=6; false; }
        } &&
        {
            /usr/local/lib/tpscli is-active Dotfiles ||
                { zenity --notification --text='"Dotfiles" must be toggled on.' --window-icon=gnome-settings --timeout=6; false; }
        }
done
# Close the Persistent Storage window
pkill -f "python3 /usr/local/lib/tps-frontend" &>/dev/null
wait
touch $SET_UP
