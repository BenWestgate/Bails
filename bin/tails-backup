#!/bin/bash
# tails-backup: Back up Tails' encrypted persistent storage
# into the backup storage area and create one if doesn't exist.
# Parameter 1 = (optional) backup Tails passphrase
# Parameter 2 = (optional) Pre-select 'Create' or 'Update'
# Parameter 3 = (optional) Pre-select 'Skip' upgrading Tails when Updating a backup Tails

set -o pipefail

export TEXTDOMAIN='tails'

# Tails' directories for source and destination
SOURCE='/live/persistence/TailsData_unlocked/'
DEST='/media/amnesia/TailsData/'

confirm=' '
[ "$1" ] && passphrase="$1"
[ "$2" ] && choice=$2
[ "$3" ] && skip='yes'

tails_installer_hook() {
    temp_log=$(mktemp)
    zenity --notification --text='Your persistence will be backed up to the Target USB stick.'
    tails-installer --verbose &>$temp_log &
    PID=$!
    # loop until cloning finishes
    until [ "$device" ]; do
        device=$(grep 'DEBUG: Unmounting' $temp_log | awk '{print $7}')
        sleep 1
        ps -p $PID >/dev/null || break
    done
    device=$(grep 'DEBUG: Unmounting' $temp_log | awk '{print $7}')
    # remove temporary log
    shred --remove $temp_log
    unset temp_log
    if [ "$device" ]; then
        sleep 10
        /usr/local/lib/clone-persistence "${device//\"/}" "$passphrase"
    else
        zenity --warning --text='Error: Tails was not installed or upgraded to any USB stick.\n\nPlease restart the backup utility to try again.' --ellipsize --title='Cloning failed'
        exit 1
    fi
    # remove passphrase from memory
    unset passphrase
}

backup_luks_device() {
    if ! /usr/libexec/bilibop/test /dev/disk/by-partlabel/TailsData >/dev/null; then
        readlink -f "/dev/disk/by-partlabel/TailsData"
    fi
}

unlocked_backup_TailsData_device() {
    if ! /usr/libexec/bilibop/test /dev/disk/by-label/TailsData >/dev/null; then
        readlink -f "/dev/disk/by-label/TailsData"
    fi
}

pinentry_auth() {
    your_device="$(gettext -s 'your backup Tails USB stick')"
    # For consistency, let's use the same text in our prompt as GVFS
    # when unlocking volumes from e.g. nautilus.
    # shellcheck disable=SC3037
    dialog="$(/bin/echo -en 'Enter a passphrase to unlock the volume\nThe passphrase is needed to access encrypted data on %s.\n')"
    gettext --domain gvfs -s "${dialog}" | (
        read -r title
        desc="$(cat)"
        # shellcheck disable=SC2059
        (pinentry-gnome3 | sed -n 's/^D //p') <<EOF
SETPROMPT ${title}
SETDESC $(printf "${desc}" "${your_device}")
GETPIN
EOF
    )
}

if [ -d "$SOURCE" ]; then
    [ "$choice" ] || choice="$(zenity --question --title="Create or Update a backup Tails USB stick" --text="This utility creates or updates a backup Tails USB stick with your persistence.\n\n• To create a new backup Tails USB stick click 'Create'.\n\n• To update your backup Tails USB stick click 'Update'." --icon-name=media-removable --extra-button=Update --extra-button=Create --switch --ellipsize)"
    [ "$choice" ] || exit 1
    if [ "$choice" == 'Create' ]; then
        zenity --info --title "Create a backup Tails USB stick" --text "This utility creates a backup Tails USB stick.\n\n• We recommend making your backup Tails USB stick\nlook different than your current Tails USB stick\n\n• We recommend using the same passphrase as your\ncurrent Tails so that the passphase is easier to remember." --ellipsize
        [ "$passphrase" ] || until [ "$passphrase" == "$confirm" ]; do
            passphrase_reply=$(zenity --forms --add-password='Passphrase:' --add-password='Confirm:' --text='We recommend using the same passphrase\nas your current Tails so that the passphase\nis easier to remember.' --title='Set backup passphrase')
            if [ "$passphrase_reply" ]; then
                passphrase=$(echo -n "$passphrase_reply" | cut -f1 -d'|')
                confirm=$(echo -n "$passphrase_reply" | cut -f2 -d'|')
                if [ "$passphrase" != "$confirm" ]; then
                    zenity --warning --text='The passphrases do not match.' --title='Set backup passphrase' --ellipsize
                fi
            else
                zenity --warning --text='No passphrase was entered' --title='Set backup passphrase' --ellipsize
                exit 1
            fi
        done
        # remove passphrase from memory
        unset confirm
        tails_installer_hook
    fi
    [ "$choice" == 'Update' ] && [ "$skip" != 'yes' ] && { zenity --question --title='Upgrade your backup Tails USB stick?' --text="If your backup Tails has an outdated version of Tails,\nwe recommend you upgrade it to your current Tails version.\n\nClick 'Skip' to update only the persistent storage backup." --ellipsize --ok-label='Upgrade' --cancel-label='Skip' || skip='yes'; }
fi

title="$(gettext -s 'Update your backup Tails')"
if [ ! -d "$SOURCE" ] || [ ! -b "$(backup_luks_device)" ]; then
    msg="$(gettext -s 'This utility updates your backup Tails USB stick.\n\nTo create a backup Tails USB stick, restart this utility.')"
    if [ ! -d "$SOURCE" ]; then
        msg="${msg}""$(gettext -s '\n\n• Unlock your Persistent Storage when starting Tails.')"
    fi
    if [ ! -b "$(backup_luks_device)" ]; then
        msg="${msg}""$(gettext -s '\n\n• Plug in your backup Tails USB stick.')"
    fi
    # Ask to retry if only the backup Tails USB stick is missing
    if [ ! -b "$(backup_luks_device)" ] && [ -d "$SOURCE" ]; then
        while [ ! -b "$(backup_luks_device)" ]; do
            if ! zenity --question --ellipsize --title "$title" --text "$msg" --ok-label "$(gettext -s 'Retry')" --cancel-label "$(gettext -s 'Cancel')"; then
                exit 1
            fi
        done
    else
        zenity --error --ellipsize --title "$title" --text "$msg"
        exit 1
    fi
fi
if [ "$choice" == 'Update' ]; then
    msg="$(gettext -s 'Do you want to update your backup Tails USB stick now?\n\nThis will replace all data in the Persistent Storage of your backup Tails.')"
    if ! zenity --question --ellipsize --title "$title" --text "$msg" --ok-label "$(gettext -s 'Update')" --cancel-label "$(gettext -s 'Cancel')"; then
        exit 1
    fi
    # skips Tails installer and early passphrase entry if updating but not upgrading.
    [ "$skip" != 'yes' ] && {
        passphrase="$(pinentry_auth)"
        tails_installer_hook
    }

    if [ ! -d "${DEST}" ]; then
        if [ -b "$(unlocked_backup_TailsData_device)" ]; then
            udisksctl mount --block-device "$(unlocked_backup_TailsData_device)"
        else
            for _ in 1 2 3; do
                res="$(
                    pinentry_auth |
                        LANG=C gio mount --device "$(backup_luks_device)" 2>&1 || :
                )"
                if [ -d "${DEST}" ]; then
                    break
                elif echo "${res}" | grep -q 'Password dialog aborted'; then
                    exit 0
                fi
            done
            if [ ! -d "${DEST}" ]; then
                zenity --error --ellipsize --title "$title" --text "$(gettext -s 'Incorrect passphrase.\n\nPlease restart the backup utility to try again.')"
                exit 1
            fi
        fi
    fi
fi

# Run real backup command. This requires privileges.
if sudo /usr/local/lib/tails-backup-rsync |
    tee /dev/stderr |
    zenity --progress --pulsate --auto-close --no-cancel; then
    # Ensure RAM buffers are written out
    echo "Synchronizing data on USB stick..."
    sync
    sync
    sync
    sleep 1
    echo "Done!"
    gio mount --eject "${DEST}"
    title="$(gettext -s 'Backup successful')"
    if [ "$choice" == 'Create' ]; then
        msg="$(gettext -s '<b>Your backup was created successfully!</b>\n\nYou can now safely unplug your backup Tails USB stick.')"
    elif [ "$skip" == 'yes' ]; then
        msg="$(gettext -s '<b>Your backup was updated successfully!</b>\n\nYou can now safely unplug your backup Tails USB stick.\n\nIf your backup Tails has an outdated version of Tails, we recommend you\nupdate it by cloning your current Tails using <i>Tails Installer</i>.\n\nSee <a href="file:///usr/share/doc/tails/website/upgrade/clone.en.html#upgrade">manually upgrade from another Tails</a>.')"
    else
        msg="$(gettext -s '<b>Your backup was updated successfully!</b>\n\nYou can now safely unplug your backup Tails USB stick.\n\nIf your backup Tails had an outdated version of Tails, we updated it\nby cloning your current Tails using <i>Tails Installer</i>.\n\nSee <a href="file:///usr/share/doc/tails/website/upgrade/clone.en.html#upgrade">manually upgrade from another Tails</a>.')"
    fi
    zenity --info --ellipsize --title "$title" --text "$msg"
else
    title="$(gettext -s 'Backup failed')"
    msg="$(gettext -s '<b>Updating your backup Tails failed.</b>\n\nYou can:\n\n• Try to update your backup Tails again.\n\n• Make sure that there is enough free space on your backup Tails.\n\n• Analyze the log in the terminal.')"
    zenity --error --ellipsize --title "$title" --text "$msg"
    exit 1
fi
