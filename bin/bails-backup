#!/bin/bash
# tails-backup: Back up Tails' encrypted persistent storage
# into the backup storage area and create one if doesn't exist.
# Parameter 1 = (optional) Pre-select 'Create', 'Update' or 'Skip'
# Parameter 2 = (optional) read passphrase from standard input, otherwise input in GUI.
# Standard Input = (optional) backup Tails passphrase

set -o pipefail

export TEXTDOMAIN='tails'
export BIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export PYTHONPATH=${PYTHONPATH}:${HOME}/.local/lib/python3/site-packages
export LOCAL_DIR=/live/persistence/TailsData_unlocked/dotfiles/.local
export DATA_DIR=/live/persistence/TailsData_unlocked/Persistent/.bitcoin

# Tails' directories for source and destination
SOURCE='/live/persistence/TailsData_unlocked/'
DEST='/media/amnesia/TailsData/'

ICON="--window-icon=$LOCAL_DIR/share/icons/bails128.png"

confirm=' '
if [ "$1" == 'Skip' ]; then
    choice='Update'
    skip='yes'
else
    choice=$1
fi
[ "$2" ] && read passphrase

tails_installer_hook() {
    temp_log=$(mktemp)
    zenity --notification --text='Your persistence will be backed up to the Target USB stick.'
    tails-installer --verbose &>$temp_log & PID=$!
    PID=$!
    # loop until cloning finishes
    until [ "$device" ]; do
        device=$(grep 'DEBUG: Unmounting' $temp_log | awk '{print $7}')
        sleep 1
        ps -p $PID >/dev/null || break
    done
    device=$(grep 'DEBUG: Unmounting' $temp_log | awk '{print $7}')
    # remove temporary log
    shred --remove $temp_log-hook
    unset temp_log
    if [ "$device" ]; then
        sleep 10
        python3 $BIN_DIR/clone-persistent "${device//\"/}" "$passphrase"
    else
        zenity --warning --text='Error: Tails was not installed or upgraded to any USB stick.\n\nPlease restart the backup utility to try again.' --ellipsize --title='Cloning failed' $ICON
        exit 1
    fi
    # remove passphrase from memory
    unset passphrase
}

backup_luks_device() {
    if ! /usr/libexec/bilibop/test /dev/disk/by-partlabel/TailsData >/dev/null; then
        readlink -f "/dev/disk/by-partlabel/TailsData"
    fi
}

unlocked_backup_TailsData_device() {
    if ! /usr/libexec/bilibop/test /dev/disk/by-label/TailsData >/dev/null; then
        readlink -f "/dev/disk/by-label/TailsData"
    fi
}

pinentry_auth() {
    your_device="$(gettext -s 'your backup Tails USB stick')"
    # For consistency, let's use the same text in our prompt as GVFS
    # when unlocking volumes from e.g. nautilus.
    # shellcheck disable=SC3037
    dialog="$(/bin/echo -en 'Enter a passphrase to unlock the volume\nThe passphrase is needed to access encrypted data on %s.\n')"
    gettext --domain gvfs -s "${dialog}" | (
        read -r title
        desc="$(cat)"
        # shellcheck disable=SC2059
        (pinentry-gnome3 | sed -n 's/^D //p') <<EOF
SETPROMPT ${title}
SETDESC $(printf "${desc}" "${your_device}")
GETPIN
EOF
    )
}

if [ -d "$SOURCE" ]; then
    [ "$choice" ] || choice="$(zenity --question --title="Create or Update a backup Tails USB stick" --text="This utility creates or updates a backup Tails USB stick with your persistence.\n\n• To create a new backup Tails USB stick click 'Create'.\n\n• To update your backup Tails USB stick click 'Update'." --icon-name=media-removable --extra-button=Update --extra-button=Create --switch --ellipsize $ICON)"
    [ "$choice" ] || exit 1
    if [ "$choice" == 'Create' ]; then
        [ "$passphrase" ] || zenity --info --title "Create a backup Tails USB stick" --text "This utility creates a backup Tails USB stick.\n\n• We recommend making your backup Tails USB stick\nlook different than your current Tails USB stick.\n\n• We recommend using the same passphrase as your\ncurrent Tails so that the passphase is easier to remember." --ellipsize $ICON
        [ "$passphrase" ] || until [ "$passphrase" == "$confirm" ]; do
            passphrase_reply=$(zenity --forms --add-password='Passphrase:' --add-password='Confirm:' --text='We recommend using the same passphrase\nas your current Tails so that the passphase\nis easier to remember.' --title='Set backup passphrase' $ICON)
            if [ "$passphrase_reply" ]; then
                passphrase=$(echo -n "$passphrase_reply" | cut -f1 -d'|')
                confirm=$(echo -n "$passphrase_reply" | cut -f2 -d'|')
                if [ "$passphrase" != "$confirm" ]; then
                    zenity --warning --text='The passphrases do not match.' --title='Set backup passphrase' --ellipsize $ICON
                fi
            else
                zenity --warning --text='No passphrase was entered.' --title='Set backup passphrase' --ellipsize $ICON
                exit 1
            fi
        done
        # remove passphrase from memory
        unset confirm
        tails_installer_hook
    fi
    [ "$choice" == 'Update' ] && [ "$skip" != 'yes' ] && { zenity --question --title='Upgrade your backup Tails USB stick?' --text="If your backup Tails has an outdated version of Tails,\nwe recommend you upgrade it to your current Tails version.\n\nClick 'Skip' to update only the persistent storage backup." --ellipsize --ok-label='Upgrade' --cancel-label='Skip' $ICON || skip='yes'; }
fi

title="$(gettext -s 'Update your backup Tails')"
if [ ! -d "$SOURCE" ] || [ ! -b "$(backup_luks_device)" ]; then
    msg="$(gettext -s 'This utility updates your backup Tails USB stick.\n\nTo create a backup Tails USB stick, restart this utility.')"
    if [ ! -d "$SOURCE" ]; then
        msg="${msg}""$(gettext -s '\n\n• Unlock your Persistent Storage when starting Tails.')"
    fi
    if [ ! -b "$(backup_luks_device)" ]; then
        msg="${msg}""$(gettext -s '\n\n• Plug in your backup Tails USB stick.')"
    fi
    # Ask to retry if only the backup Tails USB stick is missing
    if [ ! -b "$(backup_luks_device)" ] && [ -d "$SOURCE" ]; then
        while [ ! -b "$(backup_luks_device)" ]; do
            if ! zenity --question --ellipsize --title "$title" --text "$msg" --ok-label "$(gettext -s 'Retry')" --cancel-label "$(gettext -s 'Cancel')" $ICON; then
                exit 1
            fi
        done
    else
        zenity --error --ellipsize --title "$title" --text "$msg" $ICON
        exit 1
    fi
fi
if [ "$choice" == 'Update' ]; then
    msg="$(gettext -s 'Do you want to update your backup Tails USB stick now?\n\nThis will replace all data in the Persistent Storage of your backup Tails.')"
    if ! zenity --question --ellipsize --title "$title" --text "$msg" --ok-label "$(gettext -s 'Update')" --cancel-label "$(gettext -s 'Cancel')" $ICON; then
        exit 1
    fi
    # skips Tails installer and early passphrase entry if updating but not upgrading.
    [ "$skip" != 'yes' ] && {
        [ "$passphrase" ] || passphrase="$(pinentry_auth)"
        tails_installer_hook
    }

    if [ ! -d "${DEST}" ]; then
        if [ -b "$(unlocked_backup_TailsData_device)" ]; then
            udisksctl mount --block-device "$(unlocked_backup_TailsData_device)"
        else
            for _ in 1 2 3; do
                res="$(
                    pinentry_auth |
                        LANG=C gio mount --device "$(backup_luks_device)" 2>&1 || :
                )"
                if [ -d "${DEST}" ]; then
                    break
                elif echo "${res}" | grep -q 'Password dialog aborted'; then
                    exit 0
                fi
            done
            if [ ! -d "${DEST}" ]; then
                zenity --error --ellipsize --title "$title" --text "$(gettext -s 'Incorrect passphrase.\n\nPlease restart the backup utility to try again.')" $ICON
                exit 1
            fi
        fi
    fi
fi

# kill Bitcoin Core if it was already running, wait for it to shutdown safely
printf '\033]2;Waiting for Bitcoin Core to shutdown...\a'
while test -f $DATA_DIR/bitcoind.pid; do
    kill "$(<$DATA_DIR/bitcoind.pid)"
    pkill bitcoin*
    pkill electrum
    sleep 1
done

printf '\033]2;Log of Persistent Storage Backup\a'
# Log the wallets present at the time of the backup for reminder purposes
backup_uuid=$(lsblk -no UUID $(df -P ${DEST} | awk 'END{print $1}'))
mkdir --parents $LOCAL_DIR/state/backups
if cd $DATA_DIR/wallets; then
    du --bytes --summarize $DATA_DIR/wallets | cut -f1 > $LOCAL_DIR/state/backups/$backup_uuid/wallet_bytes
fi

# Log the expiry date of the backup so it stays fresh and avoids bitrot.
date>$LOCAL_DIR/state/backups/$backup_uuid/last_update


# Pick an aging coefficient between 5 and 1.5
echo $(( RANDOM % 101 + 50 )) >$LOCAL_DIR/state/backups/$backup_uuid/age_rate

# if the backup destination already has wallets, check so we won't delete any new ones accidentally
if cd ${DEST}/Persistent/.bitcoin/wallets; then
    find ./* -type d -exec bash -c 'x="{}"; test -d '$DATA_DIR'/wallets/"$x" || { zenity --warning --title="Wallet found on destination USB that is not in source USB." --text="Bails detected wallet <b>$x</b> on your backup Tails USB but it is <b>NOT</b> on the running Tails.\n\nIt has been copied to your wallets folder to avoid overwriting and losing it." '$ICON' & rsync -a $x '$DATA_DIR'/wallets; }' \;
fi

# TODO Insert Prune commands here.

# for time expiry, it should average of all backups.
# if over 4 months, it marks the oldest backup expired and repeats the calculation excluding it.
# the largest amount of backups that average under 4 months is the up-to-date backup value. 
# Example 2,4,7 would expire the oldest, then average 3 for the remaining 2 up to date backups.
# if 2 were updated, 0,4,7 averages under 4 and so it would call 3 up-to-date again.
# Ex: 1 backup reaches 4 months and a transfer is made to update it. During the swap there is 1 USB age 0 mo
# Ex: if the swapped out USB is updated to on site, he will still be asked to update the off-site one at 4 months.
# Ex: but if he keeps updating the on-site USB he could get the other to age as much as 8 months. Which is the maximum tolerable, since +50% makes that 1 year the maximum guaranteed time for data preservation. This would require ignoring the warning many times, as it suggests updating your oldest off-site backups first by swapping them out.
# TODO the user will be warned and made to awknowledge that a backup has expired if under 3 remain.
# TODO the user will be warned every startup and every 5+/-2.5 minutes, *=2 after when all have expired.
# TODO the number of up-to-date backups is displayed to the user in bails-menu, whenever one expires, before and after updating/creating a backup and constantly when 0 remain updated.
# TODO make sure every backup gets marked expired after creating new descriptor wallets or encrypting existing ones.
# TODO it would be better to check using bitcoin-wallet than the size, all USBs should expire for encryption or new wallets but not for addresses

# Run real backup command. This requires privileges.
if sudo /usr/local/lib/tails-backup-rsync |
    tee /dev/stderr |
    zenity --progress --pulsate --auto-close --no-cancel $ICON; then
    # Ensure RAM buffers are written out
    echo "Synchronizing data on USB stick..."
    sync
    sync
    sync
    sleep 1
    echo "Done!"
    gio mount --eject "${DEST}"
    title="$(gettext -s 'Backup successful')"
    if [ "$choice" == 'Create' ]; then
        msg="$(gettext -s '<b>Your backup was created successfully!</b>\n\nYou can now safely unplug your backup Tails USB stick.')"
    elif [ "$skip" == 'yes' ]; then
        msg="$(gettext -s '<b>Your backup was updated successfully!</b>\n\nYou can now safely unplug your backup Tails USB stick.\n\nIf your backup Tails has an outdated version of Tails, we recommend you\nupdate it by cloning your current Tails using <i>Tails Installer</i>.\n\nSee <a href="file:///usr/share/doc/tails/website/upgrade/clone.en.html#upgrade">manually upgrade from another Tails</a>.')"
    else
        msg="$(gettext -s '<b>Your backup was updated successfully!</b>\n\nYou can now safely unplug your backup Tails USB stick.\n\nIf your backup Tails had an outdated version of Tails, we updated it\nby cloning your current Tails using <i>Tails Installer</i>.\n\nSee <a href="file:///usr/share/doc/tails/website/upgrade/clone.en.html#upgrade">manually upgrade from another Tails</a>.')"
    fi
    zenity --info --ellipsize --title "$title" --text "$msg" $ICON
else
    title="$(gettext -s 'Backup failed')"
    msg="$(gettext -s '<b>Updating your backup Tails failed.</b>\n\nYou can:\n\n• Try to update your backup Tails again.\n\n• Make sure that there is enough free space on your backup Tails.\n\n• Analyze the log in the terminal.')"
    zenity --error --ellipsize --title "$title" --text "$msg" $ICON
    # Remove any log files that were placed expecting a successful backup.
    rm -R $LOCAL_DIR/state/backups/$backup_uuid
    # Remove the backup directory if empty
    rmdir --ignore-fail-on-non-empty $LOCAL_DIR/state/backups
    exit 1
fi
pgrep tails-installer >/dev/null && pkill tails-installer
else
    exit 0
fi

