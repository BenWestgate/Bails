#!/bin/python3
#


import sys
import codex32
import bails
from electrum import bip32

def xprv_from_seed(seed):
    y = bip32.BIP32Node
    return y.from_rootseed(bytes(seed), xtype='standard').to_xprv()

share_list = sys.argv[1:]
k, identifier, share_index, decoded = codex32.decode(sys.argv[1])
if k==0 and share_index='s':
    ms32_master_seed = sys.argv[1]
else:
    ms32_master_seed = codex32.recover_master_seed(share_list)
    
k, identifier, share_index, decoded = codex32.decode(ms32_master_seed)
print(xprv_from_seed(decoded))
if bails.identifier_is_seed_id(bytes(decoded)) != identifier:
    exit()
else:	# means using v1.0 of my paper multi-sig w/o descriptors format.
    if k ==0:
        exit()
    for n in range(k,31):
       bails_share = bails.generate_shares(str(n),ms32_master_seed)
       for share in share_list:
           count += bails_share.count(share)
       if count != 0:
           break
   for share in bails_share:
       print(share)
