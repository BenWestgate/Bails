#!/bin/bash
#######################################
# downloads bitcoin and installs it persistently
#######################################

# TODO use an until sha256sums --check SHA256SUMS; do wget *tar.gz,SHA256SUMS; done*

# Needed for zenity dialogs to have window icons 
export WAYLAND_DISPLAY=""

# set PATH environment variable to include ~/.local/bin
export PATH="${PATH}:${HOME}/.local/bin"

timeout=5	# initial spaced repetition delay in seconds
SOURCE='/live/persistence/TailsData_unlocked'

export DOTFILES=$SOURCE/dotfiles
export LOCAL_DIR=$DOTFILES/.local
export DATA_DIR=$SOURCE/Persistent/.bitcoin
export ICON="--window-icon=$HOME/.local/share/icons/bails128.png"

link_dotfiles() {
    (	# runs in a subshell to preserve current directory
      cd $DOTFILES
      for dir in $(find . -type d); do mkdir --parents $HOME${dir:1}; done
      for file in $(find . -type f); do ln --symbolic --force --no-dereference $PWD${file:1} $HOME${file:1}; done
    )
}

# Looks for good signatures
# Parameter 1 = Good Signatures required
check_sigs() {
    temp_file=$(mktemp)
    sig_file=$(mktemp)
    type=info
    gpg --verify SHA256SUMS.asc SHA256SUMS &>$sig_file
    good_sig=$(grep --count 'Good signature' $sig_file)
    if (( good_sig < $1 )); then
        type=warning
        keys="$(grep 'using' $sig_file | awk '{print $NF}' | shuf)"
        for key in $keys; do
            search_key
            (( good_sig >= $1 )) && { type=info; break; }
        done
    fi
    zenity --$type --title="$good_sig of $1 good signatures needed found" --text="$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep 'Good signature' | cut -c6-)" --no-markup --ellipsize --window-icon=$LOCAL_DIR/share/icons/bails128.png --timeout=10 & next_dialog=$!	#TODO use this to prevent multiple dialogs showing if unintended install
    shred --remove $temp_file
    shred --remove $sig_file
    unset sig_file temp_file
    (( good_sig < $1 )) && { sleep 1; check_sigs $1; }
}

# searches and displays key info
# Parameter 1 = (optional) fall back keyserver
search_key() {
    echo ''>$temp_file
    { gpg --search-keys $1 $key >$temp_file; } & PID=$!
    [ "$1" ] || echo -e "\nSearching $key on openpgp.org keyserver..."
    until grep 'key' $temp_file >/dev/null; do
        sleep 1; printf '.'
        pidof gpg >/dev/null || break
    done
    pkill gpg &>/dev/null
    if grep '@' $temp_file >/dev/null; then 
        sed -i 's/(1)/   /' $temp_file
        zenity --question --title='Do you find this individual trustworthy?' --no-markup --text="$(<$temp_file)" --ellipsize $ICON --icon-name=auth-fingerprint && gpg $1 --recv-key $key && ((++good_sig))
    else
        echo "Searching $key on fallback keyserver.ubuntu.com keyserver..."
        search_key '--keyserver keyserver.ubuntu.com'
    fi
}

# enables job control so background downloads can be foregrounded to show progress while user waits
set -m

# Set the destination directory for the download
destination_dir="$HOME/.local/share/bitcoin-core"

# Installs Bails to tmpfs
rsync --recursive $BAILS_DIR/{bin,lib,share,state} $HOME/.local/

# Create the destination directory if it doesn't exist
mkdir -p "$destination_dir"
# TODO uncomment the downloads when done testing other things
# Download Bitcoin core checksums and signatures in background
{ #wget -P "$destination_dir" --tries=1 --no-host-directories --cut-dirs=1 --recursive --level=1 --accept=SHA256SUMS* --include-directories=bin http://6hasakffvppilxgehrswmffqurlcjjjhd76jgvaqmsg6ul25s7t3rzyd.onion/en/download/ || 
wget -P "$destination_dir" --no-host-directories --cut-dirs=1 --recursive --level=1 --accept=SHA256SUMS* --include-directories=bin https://bitcoincore.org/en/download/; } & sig_dl=$!
# TODO FIXME uncomment the onion service when bitcoincore.org fixes their service.
# Download Bitcoin Core in background to the destination directory
{ #wget --continue -P "$destination_dir" --tries=1 --no-host-directories --cut-dirs=1 --recursive --level=1 --accept=x86_64-linux-gnu.tar.gz --include-directories=bin http://6hasakffvppilxgehrswmffqurlcjjjhd76jgvaqmsg6ul25s7t3rzyd.onion/en/download/ || 
wget --continue -P "$destination_dir" --no-host-directories --cut-dirs=1 --recursive --level=1 --accept=x86_64-linux-gnu.tar.gz --include-directories=bin https://bitcoincore.org/en/download/; } & core_download=$!

# Download chain parameters in background
wget -O "$destination_dir/chainparams.cpp" https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/kernel/chainparams.cpp & get_size=$!

# Setup Persistent Storage if it is not already
[ -b '/dev/mapper/TailsData_unlocked' ] || persistent-setup

# Installs Bails to Persistent Storage
rsync --recursive --remove-source-files $BAILS_DIR/{bin,lib,share,state} $LOCAL_DIR
link_dotfiles &>/dev/null	# Clobbers the tmpfs installation

printf '\033]2;Getting Bitcoin Core signatures...\a'
ps -p $sig_dl &>/dev/null && fg %$(jobs -l | grep $sig_dl | cut -f1 -d' ' | tr -c -d '[:digit:]')

# Switch into latest bitcoin-core directory
cd "$(ls -dt "$destination_dir"/bitcoin-core-* | head -1)" || exit 1

versions=$(ls -d $destination_dir/bitcoin-core-* | wc --lines)

zenity --question --title='Verify Bitcoin download' --text='Download verification is optional but highly recommended. It requires around 5 to 10 minutes.\n\nPerforming the verification steps ensures that you have not downloaded an unexpected or tampered version of Bitcoin, which may result in loss of funds.' --cancel-label='Skip' --ok-label='Verify Download' --width=610 $ICON --icon-name=/usr/share/doc/tails/website/install/inc/infography/verify-from-tails.png && { \
    # verify signatures in GUI
    [ -f SHA256SUMS ] || exit 1
    printf '\033]2;Verify Bitcoin Core signatures\a'
    (( versions > 1 )) && gpg --refresh-keys	# refresh keys in keyring to see if any were revoked since last install
    check_sigs 2
}

# Bring chainparams.cpp download to foreground then set assumed chainstate & blockchain size
ps -p $get_size &>/dev/null && fg %$(jobs -l | grep $get_size | cut -f1 -d' ' | tr -c -d '[:digit:]')
assumed_chain_state_size=$(grep --max-count=1 m_assumed_chain_state_size $destination_dir/chainparams.cpp | sed 's/[^0-9]*//g')
assumed_blockchain_size=$(grep --max-count=1 m_assumed_blockchain_size $destination_dir/chainparams.cpp | sed 's/[^0-9]*//g')	

# Display information about pruning and initial block download while user waits for download
available_storage=$(df --output=avail "$SOURCE" | tail -1)
prune_MiB=$((available_storage - assumed_chain_state_size * 1747626  > 1953125 ? available_storage / 1024 - assumed_chain_state_size * 1706 : 1907 ))
prune_GB=$(( (prune_MiB+1)*2**20/10**9))
backup_days=$((prune_MiB/309))

# Display info about IBD, keeping Tails private and reading material.
((versions)) || { while pidof zenity; do sleep 1; done; until [ "$docs" == 'Continue' ]; do docs=$(zenity --question --title='Setup almost complete' --icon-name=bails128 --window-icon=$LOCAL_DIR/share/icons/bails128.png --text='Bitcoin Core will begin syncing the block chain automatically after it downloads.\nKeep an eye on your PC so no one messes with it.\n\nTo lock the screen for privacy, press Super+L (Windows key + L)\n\nIt is safer to exit Bitcoin Core, <a href="file:///usr/share/doc/tails/website/doc/first_steps/shutdown/index.en.html">shutdown Tails</a> and take your Bails USB stick with you or store it in a safe place than leave Tails running unattended where people you distrust could tamper with it.\n\nIf you want to learn more about using Tails safely read the documentation.\n\nAn excellent way to improve your physical and digital security tactics is the "security in-a-box" website.' --extra-button='Tails Documentation' --extra-button='Security Tactics' --extra-button='Continue' --switch --width=552);
    [ "$docs" == 'Tails Documentation' ] && tor-browser file:///usr/share/doc/tails/website/doc.en.html 
    [ "$docs" == 'Security Tactics' ] && tor-browser http://lxjacvxrozjlxd7pqced7dyefnbityrwqjosuuaqponlg3v7esifrzad.onion/en/
done; zenity --title='Bitcoin Core info' --icon-name=bails128 --window-icon=$LOCAL_DIR/share/icons/bitcoin128.png --info --text="<b>Setup</b>
---------------------
Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. It will download and process the entire history of Bitcoin transactions, currently $assumed_blockchain_size gigabytes.\n\nDepending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n\nThis initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run Bitcoin Core, it will continue downloading where it left off.\n\nLimiting block chain storage to $prune_GB GB (<b>sufficient to restore backups $backup_days days old</b>)" --width=552; } &>/dev/null &

# Bring Bitcoin Core download to foreground to display progress and wait for it to complete
printf '\033]2;Downloading Bitcoin Core...\a'
ps -p $core_download &>/dev/null && fg %$(jobs -l | grep $core_download | cut -f1 -d' ' | tr -c -d '[:digit:]')

# Move completed download to persistent storage
rsync --remove-source-files $destination_dir $LOCAL_DIR/share/
read -p "bitcoin-core download should have moved to $LOCAL_DIR/share/"
link_dotfiles &>/dev/null

# Verify download integrity		# TODO make sure they can actually retry the download by re-running the script, that everything gets skipped that needs to be skipped.
if sha256sum --ignore-missing --check SHA256SUMS; then
    zenity --notification --text="Bitcoin Core download integrity successfully verified." --icon-name=bitcoin128
else
    zenity --warning --title="Download Integrity Failure" --text="Checksum does not match what was expected.\n\nClick OK to try downloading Bitcoin Core again." --ellipsize &&
    rm --verbose ./*	# removes old download
    sleep 5
    # launch script again
    install-bitcoin
    exit 1
fi

# kill Bitcoin Core if it is running, wait for it to shutdown safely
if pgrep bitcoin; then
    printf '\033]2;Waiting for Bitcoin Core to shutdown...\a'
    while test -f $DATA_DIR/bitcoind.pid; do
        kill "$(<$DATA_DIR/bitcoind.pid)"
        pkill bitcoin
        sleep 1
    done
fi

printf '\033]2;Installing Bitcoin Core...\a'
tar -xvf bitcoin-*-x86_64-linux-gnu.tar* --strip-components=1 --directory=$LOCAL_DIR
mv --force $LOCAL_DIR/{bitcoin.conf,README.md} $DATA_DIR

mkdir --parents $DATA_DIR/{chainstate,wallets,blocks}
ln --symbolic --force $DATA_DIR $DOTFILES
ln --symbolic $DOTFILES/.bitcoin $HOME

# Change mime association from electrum to bitcoin core
sed 's/electrum/bitcoin-qt/g' /usr/share/applications/mimeinfo.cache >$LOCAL_DIR/share/applications/mimeinfo.cache

# create application shortcuts
#TODO for L1

# Create config to persist gui settings and autostart
rsync --remove-source-files $BAILS_DIR/config/ $DOTFILES/.config
read -p "Bails/config should have moved to $DOTFILES/.config"

# Enable proxies for Tor and prune
[ -f $DATA_DIR/settings.json ] || echo '{
    "onion": "127.0.0.1:9050",
    "proxy": "127.0.0.1:9050",
    "prune": "'$prune_MiB'"
}' > $DATA_DIR/settings.json

ln --symbolic --force /tmp/debug.log $DATA_DIR/debug.log # links debug.log to tmp so logs won't persist restart
ln --symbolic --force /media/$USER $DATA_DIR/wallets     # links media mount directory to wallets folder for easier loading of watch encrypted or external media wallets
#TODO possibly drop a directory to make it difficult to create new Wallets in Bitcoin Core's GUI.

# Add ~/.local/bin to PATH at startup
grep --count 'export PATH="${PATH}:${HOME}/.local/bin"' $HOME/.bashrc || \
  echo 'export PATH="${PATH}:${HOME}/.local/bin"' | tee -a $HOME/.bashrc

# bypass wayland if not already so bitcoin-qt works	# TODO: Low priority: this may not be necessary anymore, verify
grep --count 'unset QT_QPA_PLATFORM' $HOME/.bashrc || { \
  echo 'unset QT_QPA_PLATFORM' | tee -a $HOME/.bashrc;
  rsync $HOME/.bashrc $DOTFILES; }

# symlink the dotfiles to $HOME
link_dotfiles &>/dev/null
read -p "config should have been symlinked to $HOME/.config"

# Cleanup
rm -Rf $BAILS_DIR/{bin,lib,share,state,config}
mv --force $BAILS_DIR $LOCAL_DIR/share/
rm -R $destination_dir/{download,*.tmp}
cd -
rm --force wget-log*

read -p "Bails should have moved to $LOCAL_DIR/share/ and nothing remain in home folder"

# Launch Bitcoin core minimized and run bails-wallet creator
printf '\033]2;Create Bails Wallet\a'

# launches bitcoind, then launches bails-wallet
bitcoind -dbcache=$(($(grep Available /proc/meminfo | sed s/[^0-9]//g)/1024-2700)) -prune=$prune_MiB -maxmempool=5 -rpcport=17600 -startupnotify="until bails-wallet; do zenity --question --title='Create Bails Wallet' --text='Are you sure you do not want to Create a Bails Wallet now?' $ICON --ellipsize && break; done; pkill bitcoind;"

gtk-launch bitcoin-qt &

# Clear notifications
dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.panel.statusArea.dateMenu._messageList._sectionList.get_children().forEach(s => s.clear());'

# Final Message
zenity --info --title='Setup Complete' \
    --text='Congratulations! You have completed the initial setup process for Bails.\n\nBe sure to distribute your backups offsite and destroy any written copies of your passphrase before storing significant funds.\n\nYou are now ready to start managing your Bitcoin securely and independently.\n\nIf you have any questions or need further assistance, refer to the provided <a href="file:///home/amnesia/share/Bails/docs">documentation</a> or visit our <a href="https://bitcoin-core-on-tails.slack.com/">support resources</a>.\n\nEnjoy using Bails!' \
    --width=640 --ok-label=Finish $ICON --icon-name=bails128 &

# Close the terminal and exit
kill -9 $PPID
exit 0
