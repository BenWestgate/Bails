#!/bin/bash

# Copyright (c) 2023 Ben Westgate
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

###############################################################################
# Downloads Bitcoin Core and installs it persistently. Starts bails-wallet.
###############################################################################

# For security reviewing use: https://explainshell.com/ for unfamiliar commands.

export SOURCE='/live/persistence/TailsData_unlocked'

# Set environment variables
export PATH="${PATH}:${HOME}/.local/bin"
export WAYLAND_DISPLAY="" # Needed for zenity dialogs to have window icon
export ICON="--window-icon=$HOME/.local/share/icons/bails128.png"
export DATA_DIR=$SOURCE/Persistent/.bitcoin
export DOTFILES=$SOURCE/dotfiles
export LOCAL_DIR=$DOTFILES/.local

DOWNLOAD_DIR=$HOME/.local/share/bitcoin-core
BITCOIN_CORE_SOURCE_DOMAINS=(
    "6hasakffvppilxgehrswmffqurlcjjjhd76jgvaqmsg6ul25s7t3rzyd.onion" #Tor onion service
    "bitcoincore.org" #clearnet
)
SECURITY_IN_A_BOX_TOR_DOMAIN="https://lxjacvxrozjlxd7pqced7dyefnbityrwqjosuuaqponlg3v7esifrzad.onion/en/"

link_dotfiles() {
    ( # runs in subshell to preserve current directory
      cd $DOTFILES
      for dir in $(find . -type d); do mkdir --parents $HOME${dir:1}; done
      for file in $(find . -type f); do ln --symbolic --force $PWD${file:1} $HOME${file:1}; done
    ) &>/dev/null
}


# Look for good signatures
# Parameter 1 = Good Signatures required
check_sigs() {
    temp_file="$(mktemp)"
    trap 'rm -rf -- "$temp_file"' EXIT
    type=info
    good_sig=$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep --count 'Good signature')
    if (( good_sig < $1 )); then
        type=warning
        keys="$(grep fingerprint $DOWNLOAD_DIR/show-keys | sed 's/ //g' | cut -f2 -d= | shuf)"
        for key in $keys; do
            search_key
            (( good_sig >= $1 )) && { type=info; break; }
        done
    fi
    zenity --$type --title="$good_sig of $1 good signatures found" --text="$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep 'Good signature' | cut -c6-)" --no-markup --width=200 --no-wrap $ICON --timeout=10 & next_dialog=$!	#TODO use this to prevent multiple dialogs showing if unintended install
    (( good_sig < $1 )) && { sleep 2; check_sigs $1; }
}


# Search and display key info
# Parameter 1 = (optional) fall back keyserver
search_key() {
    echo ''>$temp_file
    { gpg --search-keys $1 $key >$temp_file; } & gpg_pid=$!
    [ "$1" ] || echo -e "\nSearching $key on openpgp.org keyserver..."
    until grep 'key' $temp_file >/dev/null; do
        sleep 1; printf '.'
        ps -p $gpg_pid &>/dev/null || break
    done
    pkill gpg &>/dev/null
    if grep '@' $temp_file >/dev/null; then 
        sed -i 's/(1)/   /' $temp_file
        if zenity --question --title='Do you trust this individual?' --no-markup --ellipsize \
        --text="$(<$temp_file)" $ICON --icon-name=auth-fingerprint; then
            gpg $1 --recv-key $key
            good_sig=$(gpg --verify SHA256SUMS.asc SHA256SUMS 2>&1 | grep --count 'Good signature')
        else
            gpg --batch --yes --delete-keys $key &>/dev/null
        fi
    elif [ ! -z "$1" ]; then
        echo "$key not found."
        return 1
    else
        echo "Searching $key on fallback keyserver.ubuntu.com keyserver..."
        search_key '--keyserver keyserver.ubuntu.com'
    fi
}


###############################################################################
# Begin execution here
###############################################################################
printf '\033]2;Welcome to Bails!\a'

# Close tor connection assistant to clean up the screen
pkill tca &>/dev/null

# Enable job control so background downloads can be foregrounded to show progress while user waits
set -m

# Checks for existing Bitcoin Core versions
old_versions=$(ls -d $DOWNLOAD_DIR/bitcoin-core-* | wc --lines)

# Installs Bails to tmpfs
rsync --recursive $BAILS_DIR/{bin,lib,share,state} $HOME/.local/

# Create the destination directory if it doesn't exist
mkdir -p "$DOWNLOAD_DIR"

# TODO: uncomment the downloads when done testing other things
# Download Bitcoin core checksums and signatures in background
(
    cd "$DOWNLOAD_DIR"
    for domain in ${BITCOIN_CORE_SOURCE_DOMAINS[*]}; do
        wget --tries=1 --no-host-directories --cut-dirs=1 --recursive \
            --level=1 --accept=SHA256SUMS* --include-directories=bin \
            "https://${domain}/en/download/" && break
    done

    if [ $? -ne 0 ]; then
        echo "Both wget commands failed."
        exit 1
    fi
) & sig_dl=$!
# TODO FIXME uncomment the onion service when bitcoincore.org fixes their service.
# Download Bitcoin Core in background to the destination directory
(
    sleep 1
    while pgrep wget &>/dev/null; do
        sleep 1
    done
    cd "$DOWNLOAD_DIR"
    for domain in ${BITCOIN_CORE_SOURCE_DOMAINS[*]}; do
        wget --continue --tries=1 --no-host-directories --cut-dirs=1 --recursive \
            --level=1 --accept=x86_64-linux-gnu.tar.gz --include-directories=bin \
            "http://${domain}/en/download/" && break
    done

    if [ $? -ne 0 ]; then
        echo "Both wget commands failed."
        exit 1
    fi
) & core_download=$!

# Download chain parameters in background
( cd $DOWNLOAD_DIR; wget -O chainparams.cpp https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/kernel/chainparams.cpp ) & get_size=$!

# Clear the terminal
clear -x

# Setup Persistent Storage if it is not already
persistent-setup || systemctl reboot

# Install Bails to Persistent Storage
rsync --recursive --remove-source-files $BAILS_DIR/{bin,lib,share,state} $LOCAL_DIR
link_dotfiles	# Clobbers the tmpfs installation

printf '\033]2;Getting Bitcoin Core signatures...\a'
ps -p $sig_dl &>/dev/null && fg %$(jobs -l | grep $sig_dl | cut -f1 -d' ' | tr -c -d '[:digit:]')

# Switch into latest bitcoin-core directory
cd "$(ls -dt "$DOWNLOAD_DIR"/bitcoin-core-* | head -1)" || {
    zenity --warning --title="Download failure" --text="Click OK to try downloading Bitcoin Core again." --ellipsize $ICON &&
    sleep 5
    install-core	# launch this script again
    exit 1
}

versions=$(ls -d $DOWNLOAD_DIR/bitcoin-core-* | wc --lines)

if (( old_versions != versions )) || [ ! -f $LOCAL_DIR/bin/bitcoind ]; then
    if zenity --question --title='Verify Bitcoin Core download' --text='Download verification is optional but highly recommended. It requires around 5 to 10 minutes.\n\nPerforming the verification steps ensures that you have not downloaded an unexpected or tampered version of Bitcoin, which may result in loss of funds.' --cancel-label='Skip' --ok-label='Verify' --width=610 $ICON --icon-name=gtk-dialog-authentication; then
        if [ ! -f SHA256SUMS ]; then
            zenity --warning --title="Signature file not found" --text="Click OK to try downloading Bitcoin Core again." --ellipsize $ICON
            pkill wget
            rm --verbose ./*	# removes old download
            sleep 5
            install-core	# launch this script again
            exit 1
        fi
        zenity --info --title="Trustworthy individuals" --text="Bitcoin releases are signed by a number of individuals, each with a unique public key. In order to recognize the validity of signatures, you will choose a few individuals who you find trustworthy. Their keys will be used to check the signature attesting to the validity of your download." --width=620 $ICON --icon-name=security-high & understood=$!
        printf '\033]2;Getting Bitcoin Core builder keys...\a'
        ( cd $DOWNLOAD_DIR
        [ -d "guix.sigs" ] || git clone https://github.com/bitcoin-core/guix.sigs --depth=1 && \
        gpg --show-keys guix.sigs/builder-keys/*.gpg > show-keys )
        (( versions > 1 )) && gpg --refresh-keys	# refresh keys in keyring to see if any were revoked since last install
        printf '\033]2;Verify Bitcoin Core signatures\a'
        wait -f $understood
        check_sigs 2
    fi
fi

# Bring chainparams.cpp download to foreground then set assumed chainstate & blockchain size
ps -p $get_size &>/dev/null && fg %$(jobs -l | grep $get_size | cut -f1 -d' ' | tr -c -d '[:digit:]')
assumed_chain_state_size=$(grep --max-count=1 m_assumed_chain_state_size $DOWNLOAD_DIR/chainparams.cpp | sed 's/[^0-9]*//g')
assumed_blockchain_size=$(grep --max-count=1 m_assumed_blockchain_size $DOWNLOAD_DIR/chainparams.cpp | sed 's/[^0-9]*//g')

# Display information about pruning and initial block download while user waits for download
space=$(($(df --output=size $SOURCE | tail -1)/1024 - ( assumed_chain_state_size+10 )*1024))
prune_MiB=$((space > 1907 ? space : 1907 ))
prune_GB=$(( (prune_MiB+1)*2**20/10**9))
backup_days=$((prune_MiB/309))

# Bring Bitcoin Core download to foreground to display progress and wait for it to complete
printf '\033]2;Downloading Bitcoin Core...\a'
ps -p $core_download &>/dev/null && fg %$(jobs -l | grep $core_download | cut -f1 -d' ' | tr -c -d '[:digit:]')

# Move completed download to persistent storage
rsync --remove-source-files --recursive $DOWNLOAD_DIR $LOCAL_DIR/share/
link_dotfiles

# Verify download integrity		# TODO make sure they can actually retry the download by re-running the script, that everything gets skipped that needs to be skipped.
if sha256sum --ignore-missing --check SHA256SUMS; then
    zenity --notification --text="Bitcoin Core download integrity successfully verified." --window-icon=checkbox-checked
else
    zenity --warning --title="Download integrity failure" --text="Checksum does not match what was expected.\n\nClick OK to try downloading Bitcoin Core again." --ellipsize $ICON &&
    rm --verbose ./*	# removes old download
    sleep 5
    install-core	# launch this script again
    exit 1
fi

# Kill Bitcoin Core if running, wait for it to shutdown safely
# TODO: export this as a function or file, bails-wallet also needs it and so will bails-backup!
if pgrep bitcoin; then
    printf '\033]2;Waiting for Bitcoin Core to shutdown...\a'
    while test -f $DATA_DIR/bitcoind.pid; do
        kill "$(<$DATA_DIR/bitcoind.pid)"
        pkill bitcoin
        sleep 1
    done
fi

printf '\033]2;Installing Bitcoin Core...\a'
tar -xvf bitcoin-*-x86_64-linux-gnu.tar* --strip-components=1 --directory=$LOCAL_DIR
mkdir --parents $DATA_DIR/{chainstate,wallets,blocks}
mv --force $LOCAL_DIR/{bitcoin.conf,README.md} $DATA_DIR
sed --in-place 's/#rpcport=<port>/rpcport=17600/' $DATA_DIR/bitcoin.conf   # Set -rpcport for Tails
sed --in-place "s/#datadir=<dir>/datadir=$DATA_DIR/"
# Links media mount directory to wallets folder for easier loading of watch encrypted or external media wallets
ln --symbolic --force /media/$USER $DATA_DIR/wallets
chmod -w $DATA_DIR/wallets
# Links debug.log to /tmp so logs won't persist restart
ln --symbolic --force /tmp/debug.log $DATA_DIR/debug.log
# This can't be persisted by dotfiles so an autostart remakes it each session.
ln --symbolic $DATA_DIR $HOME &>/dev/null

# Change mime association from electrum to bitcoin core
sed 's/electrum/bitcoin-qt/g' /usr/share/applications/mimeinfo.cache >$LOCAL_DIR/share/applications/mimeinfo.cache

# Create application shortcuts
#TODO for L1 , note I think these are all hard coded files. None need creating, remove if true.

# Install config files to persist gui settings and autostart
rsync --remove-source-files -recursive "$BAILS_DIR"/config/ $DOTFILES/.config

# Enable proxies for Tor and prune
[ -f $DATA_DIR/settings.json ] || echo '{
    "onion": "127.0.0.1:9050",
    "proxy": "127.0.0.1:9050",
    "prune": "'$prune_MiB'"
}' > $DATA_DIR/settings.json

# Cleanup
rm -Rf $BAILS_DIR/{bin,lib,share,state,config} "$DOWNLOAD_DIR"/{download,*.tmp,wget-log*}
rsync -r --remove-source-files $BAILS_DIR $LOCAL_DIR/share/
rm -rf $BAILS_DIR
link_dotfiles

if [ -z "$(ls -A $DATA_DIR/wallets)" ]; then
    bails-wallet
fi

printf '\033]2;Bitcoin Core installation complete!\a'

bitcoin-qt-wrapper &

# Clear notifications
dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.panel.statusArea.dateMenu._messageList._sectionList.get_children().forEach(s => s.clear());'

# Display info about IBD, keeping Tails private and reading material
if ((versions < 2)); then
    # TODO: Make it easier to read. and dont run on reinstalls!
    sleep 5 # wait so the dialogs open on top of bitcoin core.
    zenity --info --title='Setup almost complete' --icon-name=bails128 "$ICON" --width=552 --text="Bitcoin Core will begin syncing the block chain automatically.\nMake sure no one messes with the PC.\n\nTo lock the screen for privacy, press ❖+L (⊞+L or ⌘+L)\n\nIt is safer to exit Bitcoin Core (Ctrl+Q), <a href=\"file:///usr/share/doc/tails/website/doc/first_steps/shutdown.en.html\">shutdown Tails</a> and take your Bails USB stick with you or store it in a safe place than leave Tails running unattended where people you distrust could tamper with it.\n\nIf you want to learn more about using Tails safely read the <a href=\"file:///usr/share/doc/tails/website/doc.en.html\">documentation</a>.\n\nAnother excellent read to improve your physical and digital security tactics is the <a href=\"${SECURITY_IN_A_BOX_TOR_URL}\">security in-a-box</a> website."
    zenity --info --title='Bitcoin Core info' --icon-name=bitcoin128 "$ICON" --width=552 --text="<b>Setup</b>\n---------------------\nBitcoin Core is the original Bitcoin client and it builds the backbone of the network. It will download and process the entire history of Bitcoin transactions, currently $assumed_blockchain_size gigabytes.\n\nDepending on your computer and network speed, the synchronization process can take anywhere from a few hours to a day or more.\n\nThis initial synchronization is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run Bitcoin Core, it will continue downloading where it left off.\n\nLimiting block chain storage to $prune_GB GB (<b>sufficient to restore backups $backup_days days old</b>)"
fi &>/dev/null &
`
# Exit by killing controlling terminal TODO: #73 replace this with something safer like `clear; echo "Installation Complete, you may now close this window."`
gnome-terminal -- pkill gnome-terminal &
