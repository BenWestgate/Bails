import ms32
import sys
CHARSET=ms32.CHARSET
VALID_LENGTH = 48

def is_valid_codex32(codex32_str):
    """Check if the given codex32 string is valid."""
    # Check length and character set
    if len(codex32_str) != VALID_LENGTH:
        return False
    # Verify the checksum
    if ms32.decode("ms",codex32_str) != (None, None, None, None):
        return True


def find_closest_valid_codex32(codex32_str, max_edits=2):
    """Find the closest valid codex32 string using an iterative approach."""
    if is_valid_codex32(codex32_str):
        return codex32_str

    def generate_edits(candidate):
        # Generate all possible edits (insertion, deletion, substitution)
        edits = set()

        # Substitutions
        for i in range(len(candidate)):
            # Deletions
            edits.add(candidate[:i] + candidate[i + 1:])
            for char in CHARSET:
                if char != candidate[i]:
                    edits.add(candidate[:i] + char + candidate[i + 1:])
                # Insertions
                edits.add(candidate[:i+1] + char + candidate[i+1:])

        return edits

    candidates = {codex32_str}  # Start with the given string as the first candidate
    for edit_distance in range(1, max_edits + 1):
        new_candidates = set()
        for candidate in candidates:
            # Generate all possible edits (insertion, deletion, substitution)
            edits = generate_edits(candidate)
            for new_candidate in edits:
                if new_candidate not in new_candidates:
                    new_candidates.add(new_candidate)
        candidates = new_candidates

        # Check if any of the new candidates are valid codex32 strings
        for candidate in candidates:
            if is_valid_codex32(candidate):
                return candidate

    return None  # If no valid codex32 string is found within the error correction capabilities

# Test the function with an example invalid codex32 string
invalid_codex32_str = sys.argv[1]
closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, int(sys.argv[2]))
if closest_valid_codex32:
    print(closest_valid_codex32)
else:
    exit(1)


