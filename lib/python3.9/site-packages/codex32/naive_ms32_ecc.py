import ms32
import sys
CHARSET=ms32.CHARSET
VALID_LENGTH = 48
VALID_HRP='ms1'

def is_valid_codex32(codex32_str):
    """Check if the given codex32 string is valid."""
    # Check length and character set
    if len(codex32_str) != VALID_LENGTH:
        return False
    if heading and codex32_str[:len(heading)] != heading:
        return False
    # Verify the checksum
    if ms32.decode("ms",codex32_str) != (None, None, None, None):
        return True





def find_closest_valid_codex32(codex32_str, insert=[], delete=[], substitute=[], valid_identifier=''):
    """Find the closest valid codex32 string using an iterative approach."""
    global heading
    heading = VALID_HRP+valid_identifier
    if is_valid_codex32(codex32_str):
        return codex32_str

    def generate_edits(candidate):
        # Generate all possible edits (insertion, deletion, substitution)
        edits = set()

        for i in range(len(candidate)):
            # Deletions
            if delete[search_phase]:
                if (i < len(heading) and candidate[i] != heading[i]) or i >= len(heading):
                    edits.add(candidate[:i] + candidate[i + 1:])
                    print(str(search_phase)+'delets')
            # Substitutions:
            if substitute[search_phase]:
                for char in CHARSET:
                    if char != candidate[i]:
                        if (i < len(heading) and char == heading[i]) or i >= len(heading):
                            edits.add(candidate[:i] + char + candidate[i + 1:])
                            print(str(search_phase)+'subs')
            # Insertions
            if insert[search_phase]:
                for char in CHARSET:
                    edits.add(candidate[:i + 1] + char + candidate[i + 1:])

        # Add insertion at the end of the candidate string
        if insert[search_phase]:
            for char in CHARSET:
                edits.add(candidate[:len(candidate)] + char)
                print(str(search_phase)+'inserts')

        return edits

    candidates = {codex32_str}  # Start with the given string as the first candidate
    for search_phase in range(0, len(delete)):
        print(search_phase)
        new_candidates = set()
        for candidate in candidates:
            # Generate all possible edits (insertion, deletion, substitution)
            edits = generate_edits(candidate)
            for new_candidate in edits:
                if new_candidate not in new_candidates:
                    new_candidates.add(new_candidate)
        candidates = new_candidates

        # Check if any of the new candidates are valid codex32 strings
        for candidate in candidates:
            if is_valid_codex32(candidate):
                return candidate

    return None  # If no valid codex32 string is found within the error correction capabilities


# Test the function with an example invalid codex32 string
invalid_codex32_str = sys.argv[1]
valid_identifier = sys.argv[2]
length_syn = len(invalid_codex32_str) - VALID_LENGTH    # parameter order  (insertion, deletion, substitution)
if length_syn == -2:
    closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [True]*2, [False]*2, [False]*2, valid_identifier)
elif length_syn == -1:
    closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [True, False], [False, False], [False, True], valid_identifier)
elif length_syn == 0:
    closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [False, True], [True, False], [False, False], valid_identifier)
    if not closest_valid_codex32:
        closest_valid_codex32= find_closest_valid_codex32(invalid_codex32_str, [False, False], [False, False], [True, True], valid_identifier)
elif length_syn == 1:
    closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [False, False], [True, False], [False,  True], valid_identifier)
    if not closest_valid_codex32:
        closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [False, False, True], [True, True, False], [False, False, False], valid_identifier)
elif length_syn == 2:
    closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [False, False, False], [True, True, False], [False, False, True], valid_identifier)
elif 6 > length_syn > 2:
    closest_valid_codex32 = find_closest_valid_codex32(invalid_codex32_str, [False]*length_syn, [True]*length_syn, [False]*length_syn, valid_identifier)

if closest_valid_codex32:
    print(closest_valid_codex32)
else:
    exit(1)