#!/usr/bin/python3
#

from codex32 import codex32
import hashlib
import random


# shares or passphrase rotated if there is suspicion or evidence that they have been compromised

def seed_id(master_seed):
    identifier = ''
    h = hashlib.new('ripemd160')
    # the upper three characters are the hash160 of the hd_seed bytes
    h.update(master_seed)
    hd_seed_id = h.digest()
    for char in codex32.convertbits(list(hd_seed_id), 8, 5)[:4]:
        identifier += codex32.CHARSET[char]
    return identifier


# for generating extra shares, always take them from the end of the random.sample, that way collisions are least likely if user forgot their 'n'.

# share indexes can be derived from scrypt(seed,identifier)
# the non-derived shares will always be the first k indicies.

# only the master seed should use double sha256 to fill the incomplete group
# the passphrase share can use an extra byte of scrypt.
# a random share can derive an extra byte or 130-bits
# protects against identifying non-derived shares which gives hints about n and may reveal the use of this scheme

def generate_shares(n, ms32_master_seed, passphrase='', public_key=''):
    derived_share_list = []
    k, identifier, share_index, decoded = codex32.decode("ms", ms32_master_seed)
    if k=='0':
        return [ms32_master_seed] * int(n)
    bytes_for_shares = int(k) * 16
    derived_shares_qty = int(n) - int(k)
    share_entropy = hashlib.scrypt(password=bytes(k+identifier[:3],"utf"), salt=bytes(decoded), n=1048576, r=8, p=1, maxmem=1025*1024*1024, dklen=bytes_for_shares)
    share_list = [ms32_master_seed]
    index_entropy = share_entropy[-16:]
    random.seed(a=index_entropy)
    share_index = random.sample(index_list, int(n))
    for x in range(int(k) - 1):
        data = list(share_entropy[x*16:x*16+16])
        share_list += [ codex32.encode("ms", k, identifier, share_index[x], data) ]
    for x in range(int(k) - 1, int(n)):
        derived_share_list += [ codex32.derive_new_share(share_list,share_index[x]) ]
    return share_list[1:] + derived_share_list
